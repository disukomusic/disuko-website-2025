// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: FM3_GOS4-xG4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component

import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicPortfolio.module.css"; // plasmic-import: FM3_GOS4-xG4/css

createPlasmicElementProxy;

export type PlasmicPortfolio__VariantMembers = {};
export type PlasmicPortfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs;
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolio__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolio__ArgsType;
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolio__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  main?: Flex__<"div">;
  headshot?: Flex__<typeof PlasmicImg__>;
  windowButton?: Flex__<typeof WindowButton>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultPortfolioProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs;
  args: PlasmicPortfolio__ArgsType;
  overrides: PlasmicPortfolio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPortfolio.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicPortfolio.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iNumN)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__s1Xm)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lXnnN
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Angelo Licavoli"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jdxSm
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "Hi! I\u2019m Angelo, and I\u2019m an enthusiast for everything having to do with digital technology. I\u2019m currently studying Immersive Media, Music Technology, and Film & Digital Media Production at Chatham University. I also release music, YouTube videos, and make art under the online alias \u201cDisuko.\u201d In my work, my main goal is sharing the truest form of myself\u2014whether that\u2019s through electronic music, cinematography, or 3D artwork. At the core of my work is using digital technology to share that inexplicable emotion that comes about when listening to your favorite song, watching your favorite movie, or being \u201cin the zone\u201d doing something you love. Much of my work uses bright pastel colors, cute aesthetics, and fun concepts to share positivity with the world. If you would like to reach out, consider my "
                      }
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__kYnJw
                        )}
                        component={Link}
                        href={"mailto:disukomusic@gmail.com"}
                        platform={"nextjs"}
                      >
                        {"email "}
                      </PlasmicLink__>
                    }
                    <React.Fragment>
                      {"or by checking out one of the many "}
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__eDwLp
                        )}
                        component={Link}
                        href={"disuko.gay/links"}
                        platform={"nextjs"}
                      >
                        {"social media platforms"}
                      </PlasmicLink__>
                    }
                    <React.Fragment>{" I\u2019m active on!"}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yDuY)}
              >
                <PlasmicImg__
                  data-plasmic-name={"headshot"}
                  data-plasmic-override={overrides.headshot}
                  alt={""}
                  className={classNames(sty.headshot)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "194px"
                      : "100%"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "127.05%"
                      : "100%"
                  }
                  loading={"eager"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/headshotWebJpg.jpg",
                    fullWidth: 1748,
                    fullHeight: 1166,
                    aspectRatio: undefined
                  }}
                />

                <WindowButton
                  data-plasmic-name={"windowButton"}
                  data-plasmic-override={overrides.windowButton}
                  className={classNames("__wab_instance", sty.windowButton)}
                  link={
                    "https://xgdsk-my.sharepoint.com/:b:/g/personal/disuko_redpandastudios_net/EVfnAtlcQNhOjn5XvQwxDrIBYEU-PhuCxCqTVDGOPvVW0Q?e=btqs4d"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dcKO
                    )}
                  >
                    {"Download Resume"}
                  </div>
                </WindowButton>
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5X5M3)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eyr0C)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__pdHhx)}
                  linkDestination={`/3d-Design`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ukXf)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/teacupFrogWorkflowJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={``}
                  windowTitle={"3D Design"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window___1FKO)}
                  linkDestination={`/2d-design`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tjX9X)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/_2DDesignCoverJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={``}
                  windowTitle={"2D Design"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__dxjgc)}
                  linkDestination={`/music`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tntif)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/angeloDJingJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={``}
                  windowTitle={"Music Technology"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z8ZTc)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__wfEx)}
                  linkDestination={`/IMM`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__wfOwc)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/immJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={``}
                  windowTitle={"Immersive Media"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__iRfJx)}
                  linkDestination={`/disuko-tv`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__hucW9)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/outsidePng.png",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={``}
                  windowTitle={"Film"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "main", "headshot", "windowButton", "footer"],
  navbar: ["navbar"],
  main: ["main", "headshot", "windowButton"],
  headshot: ["headshot"],
  windowButton: ["windowButton"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  main: "div";
  headshot: typeof PlasmicImg__;
  windowButton: typeof WindowButton;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolio__VariantsArgs;
    args?: PlasmicPortfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPortfolio__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolio__ArgProps,
          internalVariantPropNames: PlasmicPortfolio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio";
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    headshot: makeNodeComponent("headshot"),
    windowButton: makeNodeComponent("windowButton"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - portfolio🌸",
      description:
        "~all of my completed /ongoing work, including music, 3D, design, and video.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/portfolio"
    }
  }
);

export default PlasmicPortfolio;
/* prettier-ignore-end */
