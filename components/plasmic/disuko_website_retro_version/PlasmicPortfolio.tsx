/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: FM3_GOS4-xG4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import ImageWindow from "../../ImageWindow"; // plasmic-import: cCfEU_zMoOP5/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicPortfolio.module.css"; // plasmic-import: FM3_GOS4-xG4/css

createPlasmicElementProxy;

export type PlasmicPortfolio__VariantMembers = {};
export type PlasmicPortfolio__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs;
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolio__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolio__ArgsType;
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolio__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  main?: Flex__<"div">;
  imageWindow?: Flex__<typeof ImageWindow>;
  columns?: Flex__<"div">;
  imm?: Flex__<"div">;
  film?: Flex__<"div">;
  _3DDesign?: Flex__<"div">;
  music?: Flex__<"div">;
  _2DDesign?: Flex__<"div">;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultPortfolioProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs;
  args: PlasmicPortfolio__ArgsType;
  overrides: PlasmicPortfolio__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPortfolio.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolio.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPortfolio.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPortfolio.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicPortfolio.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iNumN)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__s1Xm)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__au15O)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/wordartPng2.png",
                    fullWidth: 1797,
                    fullHeight: 430,
                    aspectRatio: undefined
                  }}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__a9Ns)}
                  linkDestination={`/IMM`}
                  windowImage={null}
                  windowText={
                    "Hi! I\u2019m Angelo, and I\u2019m an enthusiast for everything having to do with digital technology. I\u2019m currently studying Immersive Media, Music Technology, and Film & Digital Media Production at Chatham University. I also make content online as \u201cDisuko.\u201d my main goal is sharing the truest form of myself with any medium available! At the core of my work is using technology to share my emotions, viewpoints, and interests. "
                  }
                  windowTitle={"about me"}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yDuY)}
              >
                <ImageWindow
                  data-plasmic-name={"imageWindow"}
                  data-plasmic-override={overrides.imageWindow}
                  className={classNames("__wab_instance", sty.imageWindow, {
                    [sty.imageWindowglobal_theme_classic]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__y5U8J)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/headShot2025SmallJpg.jpg",
                      fullWidth: 1748,
                      fullHeight: 1166,
                      aspectRatio: undefined
                    }}
                  />
                </ImageWindow>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a9Bbt)}
                >
                  <WindowButton
                    className={classNames(
                      "__wab_instance",
                      sty.windowButton__oX6B
                    )}
                    link={
                      "https://xgdsk-my.sharepoint.com/:f:/g/personal/disuko_redpandastudios_net/ElEocPBhlwxBmi3QTScyB20BlwuRi4f4rWuczU8qxsQvKA?e=sgunvh"
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dcKO,
                        {
                          [sty.textglobal_theme_classic__dcKOeNktM]: hasVariant(
                            globalVariants,
                            "theme",
                            "classic"
                          )
                        }
                      )}
                    >
                      {"Download Resume"}
                    </div>
                  </WindowButton>
                  <WindowButton
                    className={classNames(
                      "__wab_instance",
                      sty.windowButton___6RFoD
                    )}
                    link={"mailto:disukomusic@gmail.com"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__goaQ6,
                        {
                          [sty.textglobal_theme_classic__goaQ6ENktM]:
                            hasVariant(globalVariants, "theme", "classic")
                        }
                      )}
                    >
                      {"Contact"}
                    </div>
                  </WindowButton>
                </Stack__>
              </Stack__>
            </Stack__>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"imm"}
                data-plasmic-override={overrides.imm}
                className={classNames(projectcss.all, sty.imm)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__p6Lhm)}
                  linkDestination={`/IMM`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__qwXj9)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image99.png",
                        fullWidth: 1280,
                        fullHeight: 720,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={
                    "Unity Engine / Godot Engine / TouchDesigner / Arduino"
                  }
                  windowTitle={"Immersive Media"}
                />
              </div>
              <div
                data-plasmic-name={"film"}
                data-plasmic-override={overrides.film}
                className={classNames(projectcss.all, sty.film)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__oqDxY)}
                  linkDestination={`/film`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__azDap)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/vlcsnap2025042401H05M47S151Png.png",
                        fullWidth: 3840,
                        fullHeight: 2160,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={
                    "Adobe Premiere / After Effects / Davinci Resolve"
                  }
                  windowTitle={"Film"}
                />
              </div>
              <div
                data-plasmic-name={"_3DDesign"}
                data-plasmic-override={overrides._3DDesign}
                className={classNames(projectcss.all, sty._3DDesign)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__iSq4J)}
                  linkDestination={`/3d-design`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__v0XiG)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/teacupFrogWorkflowJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"Blender / Maya / Fusion 360"}
                  windowTitle={"3D Design"}
                />
              </div>
              <div
                data-plasmic-name={"music"}
                data-plasmic-override={overrides.music}
                className={classNames(projectcss.all, sty.music)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__cifFm)}
                  linkDestination={`/music`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__u2Kt)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/angeloDJingJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={
                    "FL Studio / Ableton Live/ BitWig Studio / Adobe Audition"
                  }
                  windowTitle={"Music"}
                />
              </div>
              <div
                data-plasmic-name={"_2DDesign"}
                data-plasmic-override={overrides._2DDesign}
                className={classNames(projectcss.all, sty._2DDesign)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__tlLqO)}
                  linkDestination={`/2d-design`}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__kMwug)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/_2DDesignCoverJpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"Adobe Photoshop / Illustrator"}
                  windowTitle={"2D Design"}
                />
              </div>
            </div>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "main",
    "imageWindow",
    "columns",
    "imm",
    "film",
    "_3DDesign",
    "music",
    "_2DDesign",
    "footer"
  ],
  navbar: ["navbar"],
  main: [
    "main",
    "imageWindow",
    "columns",
    "imm",
    "film",
    "_3DDesign",
    "music",
    "_2DDesign"
  ],
  imageWindow: ["imageWindow"],
  columns: ["columns", "imm", "film", "_3DDesign", "music", "_2DDesign"],
  imm: ["imm"],
  film: ["film"],
  _3DDesign: ["_3DDesign"],
  music: ["music"],
  _2DDesign: ["_2DDesign"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  main: "div";
  imageWindow: typeof ImageWindow;
  columns: "div";
  imm: "div";
  film: "div";
  _3DDesign: "div";
  music: "div";
  _2DDesign: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolio__VariantsArgs;
    args?: PlasmicPortfolio__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPortfolio__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolio__ArgProps,
          internalVariantPropNames: PlasmicPortfolio__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio";
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    imageWindow: makeNodeComponent("imageWindow"),
    columns: makeNodeComponent("columns"),
    imm: makeNodeComponent("imm"),
    film: makeNodeComponent("film"),
    _3DDesign: makeNodeComponent("_3DDesign"),
    music: makeNodeComponent("music"),
    _2DDesign: makeNodeComponent("_2DDesign"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - portfolio🌸",
      description:
        "~all of my completed /ongoing work, including music, 3D, design, and video.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/portfolio"
    }
  }
);

export default PlasmicPortfolio;
/* prettier-ignore-end */
