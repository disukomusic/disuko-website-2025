// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: P9uis2GOUgFy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicMerch.module.css"; // plasmic-import: P9uis2GOUgFy/css

createPlasmicElementProxy;

export type PlasmicMerch__VariantMembers = {};
export type PlasmicMerch__VariantsArgs = {};
type VariantPropType = keyof PlasmicMerch__VariantsArgs;
export const PlasmicMerch__VariantProps = new Array<VariantPropType>();

export type PlasmicMerch__ArgsType = {};
type ArgPropType = keyof PlasmicMerch__ArgsType;
export const PlasmicMerch__ArgProps = new Array<ArgPropType>();

export type PlasmicMerch__OverridesType = {
  mainPage?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  main?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  window?: Flex__<typeof Window>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultMerchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMerch__RenderFunc(props: {
  variants: PlasmicMerch__VariantsArgs;
  args: PlasmicMerch__ArgsType;
  overrides: PlasmicMerch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicMerch.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMerch.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMerch.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicMerch.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicMerch.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicMerch.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicMerch.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicMerch.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicMerch.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainPage"}
          data-plasmic-override={overrides.mainPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainPage,
            {
              [sty.mainPageglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <Reveal
              data-plasmic-name={"reveal"}
              data-plasmic-override={overrides.reveal}
              cascade={true}
              className={classNames("__wab_instance", sty.reveal, {
                [sty.revealglobal_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
              direction={"up"}
              effect={"slide"}
              triggerOnce={true}
            >
              <Window
                data-plasmic-name={"window"}
                data-plasmic-override={overrides.window}
                className={classNames("__wab_instance", sty.window)}
                windowText={"put my designs on your body! become ungovernable!"}
                windowTitle={"disuko's awesome swag merch"}
              />
            </Reveal>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml___0ItMd)}
              code={
                '<iframe src="https://disuko.gumroad.com/" width="100%" height="1200px" frameborder="0"></iframe>\r\n'
              }
            />

            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={"https://my-store-d2332f.creator-spring.com"}
              platform={"nextjs"}
              target={"_blank"}
            >
              {"Legacy Merch (TeeSpring)"}
            </PlasmicLink__>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__wLa1)}
            code={
              "<script src='https://storage.ko-fi.com/cdn/scripts/overlay-widget.js'></script>\r\n<script>\r\n  kofiWidgetOverlay.draw('disuko', {\r\n    'type': 'floating-chat',\r\n    'floating-chat.donateButton.text': 'Support me',\r\n    'floating-chat.donateButton.background-color': '#e296fe',\r\n    'floating-chat.donateButton.text-color': '#fff'\r\n  });\r\n</script>"
            }
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__vfCpB)}
            code={
              '<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9278519288082067"\r\n     crossorigin="anonymous"></script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainPage: [
    "mainPage",
    "navbar",
    "main",
    "reveal",
    "window",
    "link",
    "footer"
  ],
  navbar: ["navbar"],
  main: ["main", "reveal", "window", "link"],
  reveal: ["reveal", "window"],
  window: ["window"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainPage: "div";
  navbar: typeof Navbar;
  main: "div";
  reveal: typeof Reveal;
  window: typeof Window;
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMerch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMerch__VariantsArgs;
    args?: PlasmicMerch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMerch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMerch__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMerch__ArgProps,
          internalVariantPropNames: PlasmicMerch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMerch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainPage") {
    func.displayName = "PlasmicMerch";
  } else {
    func.displayName = `PlasmicMerch.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMerch = Object.assign(
  // Top-level PlasmicMerch renders the root element
  withUsePlasmicAuth(makeNodeComponent("mainPage")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    reveal: makeNodeComponent("reveal"),
    window: makeNodeComponent("window"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicMerch
    internalVariantProps: PlasmicMerch__VariantProps,
    internalArgProps: PlasmicMerch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko 🌸",
      description:
        "~official merch for music producer and content creator disuko ",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/merch"
    }
  }
);

export default PlasmicMerch;
/* prettier-ignore-end */
