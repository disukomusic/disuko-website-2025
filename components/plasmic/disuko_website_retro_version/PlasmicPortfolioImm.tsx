/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: 1EylZ3BxOpMk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import YouTube from "@plasmicpkgs/react-youtube";
import Tilt from "@plasmicpkgs/react-parallax-tilt";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicPortfolioImm.module.css"; // plasmic-import: 1EylZ3BxOpMk/css

createPlasmicElementProxy;

export type PlasmicPortfolioImm__VariantMembers = {};
export type PlasmicPortfolioImm__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolioImm__VariantsArgs;
export const PlasmicPortfolioImm__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolioImm__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolioImm__ArgsType;
export const PlasmicPortfolioImm__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolioImm__OverridesType = {
  _3DDesign?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  section?: Flex__<"section">;
  window?: Flex__<typeof Window>;
};

export interface DefaultPortfolioImmProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolioImm__RenderFunc(props: {
  variants: PlasmicPortfolioImm__VariantsArgs;
  args: PlasmicPortfolioImm__ArgsType;
  overrides: PlasmicPortfolioImm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPortfolioImm.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolioImm.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolioImm.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"_3DDesign"}
          data-plasmic-override={overrides._3DDesign}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty._3DDesign,
            {
              [sty._3DDesignglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <WindowButton
            className={classNames("__wab_instance", sty.windowButton__lEabk)}
            link={`/portfolio`}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__we74X
              )}
            >
              {"<- Back To Portfolio"}
            </div>
          </WindowButton>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Window
              data-plasmic-name={"window"}
              data-plasmic-override={overrides.window}
              className={classNames("__wab_instance", sty.window)}
              windowText={
                "I am currently Studying Immersive Media at Chatham University. I've made games, VR spaces, audiovisual installations, and more!"
              }
              windowTitle={"Immersive Media"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__mCM)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zmYwX)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pougD,
                    {
                      [sty.textglobal_theme_classic__pougDeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"New Maqam City - Audio Visual Installation"}
                </div>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton__iSnjO
                  )}
                  link={`/newmaqamcity`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w0H8F
                    )}
                  >
                    {"Documentation"}
                  </div>
                </WindowButton>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wGEkT)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image64.png",
                    fullWidth: 4032,
                    fullHeight: 3024,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__eVjEu)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image65.png",
                    fullWidth: 4032,
                    fullHeight: 3024,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gj4Pj)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vTl,
                    {
                      [sty.textglobal_theme_classic__vTleNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Space Force V2 - Game Installation"}
                </div>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton___9C6U5
                  )}
                  link={"https://prototyping.hdyar.com/projects/spaceforcev2/"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gyuHh
                    )}
                  >
                    {"Documentation"}
                  </div>
                </WindowButton>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___4Bndd)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/img1125Jpg.jpg",
                    fullWidth: 2048,
                    fullHeight: 1365,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___04Khb)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/img1113Jpg.jpg",
                    fullWidth: 2048,
                    fullHeight: 1365,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dtrej)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o7YEf,
                    {
                      [sty.textglobal_theme_classic__o7YEfeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Joey Work on Groove Machines Simulator - Desktop Game"}
                </div>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton__jHsSp
                  )}
                  link={
                    "https://itch.io/jam/red-panda-studios-secret-santa/rate/3221285"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Mand
                    )}
                  >
                    {"Itch.io Download"}
                  </div>
                </WindowButton>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tk8Q8)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/screenshot20250103202225Png.png",
                    fullWidth: 1401,
                    fullHeight: 1068,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__t6PI1)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image76.png",
                    fullWidth: 1919,
                    fullHeight: 1079,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__avUeE)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3LwqQ,
                    {
                      [sty.textglobal_theme_classic___3LwqQeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Bucaneer Waterplace - VR Experience"}
                </div>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton__aVig1
                  )}
                  link={"https://github.com/disukomusic/Bucaneer-Waterplace"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ba3Hf
                    )}
                  >
                    {"Download/Source Code"}
                  </div>
                </WindowButton>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__tedby)}
                  videoId={"jOxigogeKLw"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ro7Nq)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nAytI,
                    {
                      [sty.textglobal_theme_classic__nAytIeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Frutiger Aero Experience - VR Experience"}
                </div>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__rtUap)}
                  videoId={"Ey5fA03QNu8"}
                />

                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton__guchs
                  )}
                  link={
                    "https://github.com/disukomusic/FrutigerAeroPhoneInteraction"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tuKys
                    )}
                  >
                    {"Source Code"}
                  </div>
                </WindowButton>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lfPiy)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4LD3V,
                    {
                      [sty.textglobal_theme_classic___4LD3VeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Cherry Tree Island - VR Experience"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yoLxI)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/screenshot20230925110245Png.png",
                    fullWidth: 1099,
                    fullHeight: 586,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__znQg3)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/screenshot20230925110358Png.png",
                    fullWidth: 1095,
                    fullHeight: 579,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fz0Ce)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mDrnr,
                    {
                      [sty.textglobal_theme_classic__mDrnReNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Pirate Navigation System - VR Experience"}
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__v19Aj)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/screenshot20231105173825Png.png",
                    fullWidth: 719,
                    fullHeight: 433,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__oFf)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "auto"
                      : "384px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image45.png",
                    fullWidth: 1022,
                    fullHeight: 572,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__fwQTu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rj5Us
                  )}
                >
                  {"Capsule Cat's Mining Adventure - Flatscreen Game"}
                </div>
                <Tilt className={classNames("__wab_instance", sty.tilt__uc7Yg)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__uIyrN)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/screenshot20240228232819Png.png",
                      fullWidth: 1758,
                      fullHeight: 853,
                      aspectRatio: undefined
                    }}
                  />
                </Tilt>
                <Tilt className={classNames("__wab_instance", sty.tilt__vgqNo)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gBUgw)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/screenshot20240228234811Png.png",
                      fullWidth: 677,
                      fullHeight: 552,
                      aspectRatio: undefined
                    }}
                  />
                </Tilt>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  _3DDesign: ["_3DDesign", "navbar", "section", "window"],
  navbar: ["navbar"],
  section: ["section", "window"],
  window: ["window"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  _3DDesign: "div";
  navbar: typeof Navbar;
  section: "section";
  window: typeof Window;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolioImm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolioImm__VariantsArgs;
    args?: PlasmicPortfolioImm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolioImm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPortfolioImm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolioImm__ArgProps,
          internalVariantPropNames: PlasmicPortfolioImm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolioImm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "_3DDesign") {
    func.displayName = "PlasmicPortfolioImm";
  } else {
    func.displayName = `PlasmicPortfolioImm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolioImm = Object.assign(
  // Top-level PlasmicPortfolioImm renders the root element
  withUsePlasmicAuth(makeNodeComponent("_3DDesign")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    section: makeNodeComponent("section"),
    window: makeNodeComponent("window"),

    // Metadata about props expected for PlasmicPortfolioImm
    internalVariantProps: PlasmicPortfolioImm__VariantProps,
    internalArgProps: PlasmicPortfolioImm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Immersive Media",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPortfolioImm;
/* prettier-ignore-end */
