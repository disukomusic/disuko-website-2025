// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: 5THU1wffFibB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component

import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 5THU1wffFibB/css

import Menu2SvgIcon from "./icons/PlasmicIcon__Menu2Svg"; // plasmic-import: 4K5AtHD7Sm9b/icon
import XSvgIcon from "./icons/PlasmicIcon__XSvg"; // plasmic-import: EpD6VZmHLNkz/icon
import HomeSvgIcon from "./icons/PlasmicIcon__HomeSvg"; // plasmic-import: 6Ekm8Isg67LL/icon
import BriefcaseSvgIcon from "./icons/PlasmicIcon__BriefcaseSvg"; // plasmic-import: VT0pvr2nVCFM/icon
import PigMoneySvgIcon from "./icons/PlasmicIcon__PigMoneySvg"; // plasmic-import: Mw15Gxb9gfwR/icon
import HeadphonesSvgIcon from "./icons/PlasmicIcon__HeadphonesSvg"; // plasmic-import: NucfzTbZic8q/icon
import ShirtSvgIcon from "./icons/PlasmicIcon__ShirtSvg"; // plasmic-import: KnlYTKjO7sZL/icon
import LinkSvgIcon from "./icons/PlasmicIcon__LinkSvg"; // plasmic-import: 6dLhR5cJXVSX/icon

createPlasmicElementProxy;

export type PlasmicNavbar__VariantMembers = {};
export type PlasmicNavbar__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  img?: Flex__<typeof PlasmicImg__>;
  freeBox?: Flex__<"div">;
  home?: Flex__<typeof Reveal>;
  portfolio?: Flex__<typeof Reveal>;
  commissions?: Flex__<typeof Reveal>;
  music?: Flex__<typeof Reveal>;
  merch?: Flex__<typeof Reveal>;
  links?: Flex__<typeof Reveal>;
};

export interface DefaultNavbarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdmuurUfQuA6N(),
    theme: useTheme()
  });

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          href={`/`}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            src={{
              src: "/plasmic/disuko_website_retro_version/images/disuko95PandaOnlyPng.png",
              fullWidth: 400,
              fullHeight: 438,
              aspectRatio: undefined
            }}
          />
        </PlasmicLink__>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_classic]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          ),
          [sty.rootglobal_theme_classic]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        }
      )}
      closeButton={
        <XSvgIcon
          className={classNames(projectcss.all, sty.svg__t0Ftl)}
          role={"img"}
        />
      }
      forceOpenMenu={
        hasVariant(globalVariants, "theme", "classic") &&
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? false
          : hasVariant(globalVariants, "screen", "mobileOnly")
          ? false
          : false
      }
      itemsGap={10}
      menuItems={
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxglobal_theme_classic]: hasVariant(
              globalVariants,
              "theme",
              "classic"
            )
          })}
        >
          <Reveal
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames("__wab_instance", sty.home)}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton__tn906)}
              hoverText={"home"}
            >
              <HomeSvgIcon
                className={classNames(projectcss.all, sty.svg__xnHt0, {
                  [sty.svgglobal_theme_classic__xnHt0ENktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nN29R,
                  {
                    [sty.textglobal_theme_classic__nN29ReNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"Home"}
              </div>
            </WindowButton>
          </Reveal>
          <Reveal
            data-plasmic-name={"portfolio"}
            data-plasmic-override={overrides.portfolio}
            className={classNames("__wab_instance", sty.portfolio)}
            delay={100}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton__cMdyj)}
              hoverText={"portfolio"}
              link={`/portfolio`}
            >
              <BriefcaseSvgIcon
                className={classNames(projectcss.all, sty.svg__pplbH, {
                  [sty.svgglobal_theme_classic__pplbHeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eDvga,
                    {
                      [sty.textglobal_theme_classic__eDvgaeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Portfolio"}
                </div>
              ) : null}
            </WindowButton>
          </Reveal>
          <Reveal
            data-plasmic-name={"commissions"}
            data-plasmic-override={overrides.commissions}
            className={classNames("__wab_instance", sty.commissions)}
            delay={75}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton___3YNfu)}
              hoverText={"links"}
              link={`/commissions`}
            >
              <PigMoneySvgIcon
                className={classNames(projectcss.all, sty.svg__ztfub, {
                  [sty.svgglobal_theme_classic__ztfuBeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y17KY,
                    {
                      [sty.textglobal_theme_classic__y17KYeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Commissions"}
                </div>
              ) : null}
            </WindowButton>
          </Reveal>
          <Reveal
            data-plasmic-name={"music"}
            data-plasmic-override={overrides.music}
            className={classNames("__wab_instance", sty.music)}
            delay={25}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton___3EuI3)}
              hoverText={"music"}
              link={`/music`}
            >
              <HeadphonesSvgIcon
                className={classNames(projectcss.all, sty.svg__xxDv3, {
                  [sty.svgglobal_theme_classic__xxDv3ENktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zWkR,
                    {
                      [sty.textglobal_theme_classic__zWkReNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Music"}
                </div>
              ) : null}
            </WindowButton>
          </Reveal>
          <Reveal
            data-plasmic-name={"merch"}
            data-plasmic-override={overrides.merch}
            className={classNames("__wab_instance", sty.merch)}
            delay={50}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton__kL7LU)}
              hoverText={"merch"}
              link={`/merch`}
            >
              <ShirtSvgIcon
                className={classNames(projectcss.all, sty.svg__qOyw6, {
                  [sty.svgglobal_theme_classic__qOyw6ENktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__druR,
                    {
                      [sty.textglobal_theme_classic__druReNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Merch"}
                </div>
              ) : null}
            </WindowButton>
          </Reveal>
          <Reveal
            data-plasmic-name={"links"}
            data-plasmic-override={overrides.links}
            className={classNames("__wab_instance", sty.links, {
              [sty.linksglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
            delay={75}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <WindowButton
              className={classNames("__wab_instance", sty.windowButton__qgoUk)}
              hoverText={"links"}
              link={`/links`}
            >
              <LinkSvgIcon
                className={classNames(projectcss.all, sty.svg___0Ym7, {
                  [sty.svgglobal_theme_classic___0Ym7ENktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                role={"img"}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___01EBc,
                    {
                      [sty.textglobal_theme_classic___01EBceNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"Links"}
                </div>
              ) : null}
            </WindowButton>
          </Reveal>
        </Stack__>
      }
      openButton={
        <Menu2SvgIcon
          className={classNames(projectcss.all, sty.svg__wgcBe)}
          role={"img"}
        />
      }
      responsiveBreakpoint={768}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "img",
    "freeBox",
    "home",
    "portfolio",
    "commissions",
    "music",
    "merch",
    "links"
  ],
  link: ["link", "img"],
  img: ["img"],
  freeBox: [
    "freeBox",
    "home",
    "portfolio",
    "commissions",
    "music",
    "merch",
    "links"
  ],
  home: ["home"],
  portfolio: ["portfolio"],
  commissions: ["commissions"],
  music: ["music"],
  merch: ["merch"],
  links: ["links"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  link: "a";
  img: typeof PlasmicImg__;
  freeBox: "div";
  home: typeof Reveal;
  portfolio: typeof Reveal;
  commissions: typeof Reveal;
  music: typeof Reveal;
  merch: typeof Reveal;
  links: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavbar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    home: makeNodeComponent("home"),
    portfolio: makeNodeComponent("portfolio"),
    commissions: makeNodeComponent("commissions"),
    music: makeNodeComponent("music"),
    merch: makeNodeComponent("merch"),
    links: makeNodeComponent("links"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
