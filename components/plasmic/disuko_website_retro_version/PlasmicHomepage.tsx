// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: _3yXuN7uR8m4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import RetroDisuko from "../../RetroDisuko"; // plasmic-import: QqNZTwn4eyfL/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: _3yXuN7uR8m4/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  onThemeChange?: (value: string) => void;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "onThemeChange"
);

export type PlasmicHomepage__OverridesType = {
  mainPage?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  main?: Flex__<"div">;
  columns?: Flex__<"div">;
  retroDisuko?: Flex__<typeof RetroDisuko>;
  email?: Flex__<typeof WindowButton>;
  discord?: Flex__<typeof WindowButton>;
  popover?: Flex__<typeof AntdPopover>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  music?: Flex__<typeof Window>;
  video?: Flex__<typeof Window>;
  design?: Flex__<typeof Window>;
  embedHtml?: Flex__<typeof Embed>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"mainPage"}
          data-plasmic-override={overrides.mainPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainPage,
            {
              [projectcss.global_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              ),
              [sty.mainPageglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar, {
              [sty.navbarglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__kzUaY)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__kOtxd, {
                    [sty.freeBoxglobal_theme_classic__kOtxDeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                >
                  <RetroDisuko
                    data-plasmic-name={"retroDisuko"}
                    data-plasmic-override={overrides.retroDisuko}
                    className={classNames("__wab_instance", sty.retroDisuko)}
                  />

                  <Window
                    className={classNames("__wab_instance", sty.window__nrQmc, {
                      [sty.windowglobal_theme_classic__nrQmCeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    })}
                    showImage={true}
                    windowImage={
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__egdmN, {
                          [sty.imgglobal_theme_classic__egdmNeNktM]: hasVariant(
                            globalVariants,
                            "theme",
                            "classic"
                          )
                        })}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                        src={
                          hasVariant(globalVariants, "theme", "classic")
                            ? {
                                src: "/plasmic/disuko_website_retro_version/images/headshotButBadPng.png",
                                fullWidth: 768,
                                fullHeight: 512,
                                aspectRatio: undefined
                              }
                            : {
                                src: "/plasmic/disuko_website_retro_version/images/headshotWebJpg.jpg",
                                fullWidth: 1748,
                                fullHeight: 1166,
                                aspectRatio: undefined
                              }
                        }
                      />
                    }
                    windowText={
                      "i'm disuko, i'm an enthusiast of all things involving digital art. i love to express myself through music, design, and film. i hope you enjoy my work!"
                    }
                    windowTitle={"hi there!"}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__e56VT,
                        {
                          [sty.freeBoxglobal_theme_classic__e56VTeNktM]:
                            hasVariant(globalVariants, "theme", "classic")
                        }
                      )}
                    >
                      <WindowButton
                        className={classNames(
                          "__wab_instance",
                          sty.windowButton__n99S
                        )}
                        hoverText={"bluesky"}
                        link={"https://bsky.app/profile/disuko.gay"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___6XdE)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/image69.png",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        className={classNames(
                          "__wab_instance",
                          sty.windowButton___08Fd
                        )}
                        hoverText={"youtube"}
                        link={"https://youtube.com/disuko"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tqrc6)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/image75.png",
                            fullWidth: 225,
                            fullHeight: 225,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        data-plasmic-name={"email"}
                        data-plasmic-override={overrides.email}
                        className={classNames("__wab_instance", sty.email)}
                        hoverText={"disukomusic@gmail.com"}
                        link={"mailto:disukomusic@gmail.com"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___6LpHe)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/downloadPng.png",
                            fullWidth: 225,
                            fullHeight: 225,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        className={classNames(
                          "__wab_instance",
                          sty.windowButton__xxYqn
                        )}
                        hoverText={"spacehey"}
                        link={"https://space.disuko.gay"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__edwYc)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/logoSquarePng.png",
                            fullWidth: 370,
                            fullHeight: 370,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        className={classNames(
                          "__wab_instance",
                          sty.windowButton__ieUPe
                        )}
                        hoverText={"instagram"}
                        link={"https://instagram.com/disukomusic"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__f0Rne)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/_61Ad0808Dbd51Fdb95966E65Dc6C4C69906C81F21600X900Png.png",
                            fullWidth: 1080,
                            fullHeight: 608,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        className={classNames(
                          "__wab_instance",
                          sty.windowButton__jJLlc
                        )}
                        hoverText={"neocities"}
                        link={"https://disuko.neocities.org"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___8MaEg)}
                          displayHeight={"44px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/disuko95PandaOnlyPng.png",
                            fullWidth: 400,
                            fullHeight: 438,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                      <WindowButton
                        data-plasmic-name={"discord"}
                        data-plasmic-override={overrides.discord}
                        className={classNames("__wab_instance", sty.discord)}
                        hoverText={"join the disukord"}
                        link={"https://discord.disuko.gay"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__fb44Q)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"44px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/iWasRedesigningSomeOfMyDesktopIconsToBeInAV041Jnk7Lc9Aha11Png.webp",
                            fullWidth: 500,
                            fullHeight: 500,
                            aspectRatio: undefined
                          }}
                        />
                      </WindowButton>
                    </Stack__>
                  </Window>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mb3Nk)}
                  >
                    <AntdPopover
                      data-plasmic-name={"popover"}
                      data-plasmic-override={overrides.popover}
                      arrow={true}
                      className={classNames("__wab_instance", sty.popover)}
                      content={null}
                      contentText={"My Media Group / Game studio!"}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens,
                        {
                          [projectcss.global_theme_classic]: hasVariant(
                            globalVariants,
                            "theme",
                            "classic"
                          )
                        }
                      )}
                      mouseEnterDelay={0}
                      mouseLeaveDelay={0}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "popover",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["popover", "open"])}
                      placement={"bottomLeft"}
                      popoverScopeClassName={sty["popover__popover"]}
                      title={null}
                    >
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        href={"https://redpandastudios.net"}
                        platform={"nextjs"}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___4KLe)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/disuko_website_retro_version/images/redPandaStudiosGeocitiesBannerBackgroundGif.gif",
                            fullWidth: 88,
                            fullHeight: 186,
                            aspectRatio: undefined
                          }}
                        />
                      </PlasmicLink__>
                    </AntdPopover>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__kovoB)}
                      displayHeight={"31px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"88px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/disukoMainGif.gif",
                        fullWidth: 88,
                        fullHeight: 186,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___5Gg2R)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        "https://external-media.spacehey.net/media/sCPhdIMrlCSpgDVV1CPp8McV3Ppygz_q-eAi7Jujqnvc=/https://splattacks.neocities.org/images/graphics/b14.png"
                      }
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uUrMe)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={
                        "https://external-media.spacehey.net/media/sc1oC4-CeP0E0mfoS9CDKwEjolsM7BVgx9YTWjhk1cEg=/https://cyber.dabamos.de/88x31/bob.gif"
                      }
                    />
                  </div>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___1BUuK)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j1TvY)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ajnzs)}
                      displayHeight={"100%"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image41.gif",
                        fullWidth: 50,
                        fullHeight: 200,
                        aspectRatio: undefined
                      }}
                    />

                    <Window
                      data-plasmic-name={"music"}
                      data-plasmic-override={overrides.music}
                      className={classNames("__wab_instance", sty.music)}
                      linkDestination={`/music`}
                      showImage={false}
                      windowText={
                        "I produce electronic music geared towards rhythm games, involving fast tempos, high energy, and complex rhythms! available on all streaming services."
                      }
                      windowTitle={"Music Production"}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pdtg)}
                  >
                    <Window
                      data-plasmic-name={"video"}
                      data-plasmic-override={overrides.video}
                      className={classNames("__wab_instance", sty.video)}
                      linkDestination={"https://youtube.com/disuko"}
                      showImage={false}
                      windowText={
                        "i run two youtube channels! my main channel, disuko, focuses on audio gear, 3d software, and other creative technology applications while my second channel disuko flips focuses on collecting and flipping butterfly knives."
                      }
                      windowTitle={"Video production"}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___4JlTj)}
                      displayHeight={"110px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"78px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image42.gif",
                        fullWidth: 110,
                        fullHeight: 1840,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ePVwd)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__k7Yj8)}
                      displayHeight={"110px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"78px"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image43.gif",
                        fullWidth: 75,
                        fullHeight: 900,
                        aspectRatio: undefined
                      }}
                    />

                    <Window
                      data-plasmic-name={"design"}
                      data-plasmic-override={overrides.design}
                      className={classNames("__wab_instance", sty.design)}
                      linkDestination={`/portfolio`}
                      showImage={false}
                      windowText={
                        "I also create digital art in Blender, using 3D Modeling, procedural rendering, and NPR (non photoreal rendering) techniques."
                      }
                      windowTitle={"3D/2D Design"}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column___1HqMm)}>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml, {
                    [sty.embedHtmlglobal_theme_classic]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  code={
                    '<script type="module" src="https://unpkg.com/@splinetool/viewer@1.0.54/build/spline-viewer.js"></script>\r\n<spline-viewer url="https://prod.spline.design/Kvsro7HSBfwwi2Kk/scene.splinecode"></spline-viewer>'
                  }
                />
              </div>
            </div>
            <Window
              className={classNames("__wab_instance", sty.window__ys5AE, {
                [sty.windowglobal_theme_classic__ys5AEeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
              linkDestination={`/commissions`}
              showImage={false}
              windowText={
                "Need a logo, 3d model, or song? Check out my new commissions page!"
              }
              windowTitle={"COMMISSIONS OPEN"}
            />
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footerglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainPage: [
    "mainPage",
    "navbar",
    "main",
    "columns",
    "retroDisuko",
    "email",
    "discord",
    "popover",
    "link",
    "music",
    "video",
    "design",
    "embedHtml",
    "footer"
  ],
  navbar: ["navbar"],
  main: [
    "main",
    "columns",
    "retroDisuko",
    "email",
    "discord",
    "popover",
    "link",
    "music",
    "video",
    "design",
    "embedHtml"
  ],
  columns: [
    "columns",
    "retroDisuko",
    "email",
    "discord",
    "popover",
    "link",
    "music",
    "video",
    "design",
    "embedHtml"
  ],
  retroDisuko: ["retroDisuko"],
  email: ["email"],
  discord: ["discord"],
  popover: ["popover", "link"],
  link: ["link"],
  music: ["music"],
  video: ["video"],
  design: ["design"],
  embedHtml: ["embedHtml"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainPage: "div";
  navbar: typeof Navbar;
  main: "div";
  columns: "div";
  retroDisuko: typeof RetroDisuko;
  email: typeof WindowButton;
  discord: typeof WindowButton;
  popover: typeof AntdPopover;
  link: "a";
  music: typeof Window;
  video: typeof Window;
  design: typeof Window;
  embedHtml: typeof Embed;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainPage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("mainPage")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    columns: makeNodeComponent("columns"),
    retroDisuko: makeNodeComponent("retroDisuko"),
    email: makeNodeComponent("email"),
    discord: makeNodeComponent("discord"),
    popover: makeNodeComponent("popover"),
    link: makeNodeComponent("link"),
    music: makeNodeComponent("music"),
    video: makeNodeComponent("video"),
    design: makeNodeComponent("design"),
    embedHtml: makeNodeComponent("embedHtml"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko 🌸",
      description:
        "~official website for music producer and content creator disuko ",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
