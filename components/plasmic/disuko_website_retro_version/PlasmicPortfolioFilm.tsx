/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: on3V-1opBN4k

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import YouTube from "@plasmicpkgs/react-youtube";
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicPortfolioFilm.module.css"; // plasmic-import: on3V-1opBN4k/css

createPlasmicElementProxy;

export type PlasmicPortfolioFilm__VariantMembers = {};
export type PlasmicPortfolioFilm__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolioFilm__VariantsArgs;
export const PlasmicPortfolioFilm__VariantProps = new Array<VariantPropType>();

export type PlasmicPortfolioFilm__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolioFilm__ArgsType;
export const PlasmicPortfolioFilm__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolioFilm__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
};

export interface DefaultPortfolioFilmProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolioFilm__RenderFunc(props: {
  variants: PlasmicPortfolioFilm__VariantsArgs;
  args: PlasmicPortfolioFilm__ArgsType;
  overrides: PlasmicPortfolioFilm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicPortfolioFilm.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolioFilm.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolioFilm.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPortfolioFilm.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPortfolioFilm.pageMetadata.ogImageSrc}
        />
        <link
          rel="canonical"
          href={PlasmicPortfolioFilm.pageMetadata.canonical}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__pOeY, {
              [sty.freeBoxglobal_theme_classic__pOeYeNktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bG8Vr,
                {
                  [sty.textglobal_theme_classic__bG8VreNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                }
              )}
            >
              {"Film + Video Production"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__rg6QH)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7UsEa,
                  {
                    [sty.textglobal_theme_classic___7UsEaeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {
                  "ACES Wired - Director, VFX Supervisor, Camera Operator, Editor, Sound Designer"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ne57U,
                  {
                    [sty.textglobal_theme_classic__ne57UeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {
                  "In a dystopian neon-lit future, four gambling addicts trapped in a high-stakes poker game must overcome their mistrust and personal conflicts to expose the real cheater and dismantle the rigged system controlling their fate."
                }
              </div>
              <YouTube
                className={classNames("__wab_instance", sty.youTube__nmbLm)}
                color={"red"}
                fs={true}
                modestbranding={false}
                rel={false}
                videoId={"Mjet_qw9yPs"}
              />
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___15XOr)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ldHrG)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cxf9A,
                    {
                      [sty.textglobal_theme_classic__cxf9AeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"ARE YOU ENGAGED? / I AM NOT ENGAGED"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xuda,
                    {
                      [sty.textglobal_theme_classic__xudAeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {
                    "ARE YOU ENGAGED? / I AM NOT ENGAGED is an audio visual project displayed on 3 vertically stacked CRT TVs that provides\r commentary on how modern day media such as short form content, political-lobbied news TV, and online echo chambers affect our lives, minds, and socio political opinions. The project has a wide breadth of tone, including satire, surrealism, and serious commentary. \r"
                  }
                </div>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__bt9Jc)}
                  rel={false}
                  videoId={"XI30lZMrOoA"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4YnIf)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ttibv,
                    {
                      [sty.textglobal_theme_classic__ttibveNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"INTRO TO BALISONGS"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w7SCs,
                    {
                      [sty.textglobal_theme_classic__w7SCSeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {
                    "A casual documentary / informal YouTube style video exploring the history, community, and basics of flipping and collecting balisongs (butterfly knives). It provides a fun, informative, and useful resource for anyone interested in joining the hobby. "
                  }
                </div>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__jxMd2)}
                  rel={false}
                  videoId={"5lbSvQbllUs"}
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5LGiX)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___0VR80)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xl3Sf,
                    {
                      [sty.textglobal_theme_classic__xl3SFeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {"HELLO MY NAME IS"}
                </div>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton__mydqJ
                  )}
                  link={
                    "https://xgdsk-my.sharepoint.com/:b:/g/personal/disuko_redpandastudios_net/ES51jV_JcGBLjHYQEk41C7IBEtD3Ym3kPsnupJrFQ4fo3w?e=XEmK8g"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ibkCf
                    )}
                  >
                    {"Press Kit"}
                  </div>
                </WindowButton>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vvkyD,
                    {
                      [sty.textglobal_theme_classic__vvkyDeNktM]: hasVariant(
                        globalVariants,
                        "theme",
                        "classic"
                      )
                    }
                  )}
                >
                  {
                    "HELLO MY NAME IS showcases a series of street stickers of a colorful character outrunning an unseen evil, rebelling with resistance and spreading vibrancy through the city on their journey. "
                  }
                </div>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__ioUbv)}
                  rel={false}
                  videoId={"t7b6Oy_T_L4"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tXOyE)} />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2Jv9Y)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bDQrz)}>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__sLc1T)}
                  videoId={"c9gd_szKhcg"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aaGZo)}>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__iWfLn)}
                  videoId={"yHNOJKyBp_4"}
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__h9FKw)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kR3NA)}>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube___37Wk0)}
                  videoId={"XkEfUyL0aA0"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oRjzq)}>
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__ppHEr)}
                  videoId={"IbgGUF6DuZw"}
                />
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rwLhz,
                {
                  [sty.textglobal_theme_classic__rwLhzeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                }
              )}
            >
              {"Visual Effects / Animation"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8HnN1)}
            >
              <YouTube
                className={classNames("__wab_instance", sty.youTube__xp5LW)}
                videoId={"DLiNRjd395w"}
              />

              <YouTube
                className={classNames("__wab_instance", sty.youTube__lzTyL)}
                videoId={"UROiJOriRqE"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p3RQf)}
            >
              <YouTube
                className={classNames("__wab_instance", sty.youTube___5SiJ8)}
                videoId={"LPWDiN1b5vE"}
              />

              <YouTube
                className={classNames("__wab_instance", sty.youTube__uiKjy)}
                videoId={"pegx7KEoYoA"}
              />
            </Stack__>
          </div>
          <WindowButton
            className={classNames("__wab_instance", sty.windowButton__sf98Q)}
            link={`/portfolio`}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nylMx,
                {
                  [sty.textglobal_theme_classic__nylMxeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                }
              )}
            >
              {"<- Back To Portfolio"}
            </div>
          </WindowButton>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar"],
  navbar: ["navbar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolioFilm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolioFilm__VariantsArgs;
    args?: PlasmicPortfolioFilm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolioFilm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPortfolioFilm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolioFilm__ArgProps,
          internalVariantPropNames: PlasmicPortfolioFilm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolioFilm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolioFilm";
  } else {
    func.displayName = `PlasmicPortfolioFilm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolioFilm = Object.assign(
  // Top-level PlasmicPortfolioFilm renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),

    // Metadata about props expected for PlasmicPortfolioFilm
    internalVariantProps: PlasmicPortfolioFilm__VariantProps,
    internalArgProps: PlasmicPortfolioFilm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "🌸Disuko's Film Portfolio",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/film"
    }
  }
);

export default PlasmicPortfolioFilm;
/* prettier-ignore-end */
