// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: B9r13xvT8S00

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import NavbarPixel from "../../NavbarPixel"; // plasmic-import: T3-8dI7L0stN/component
import FooterPixel from "../../FooterPixel"; // plasmic-import: GKHfm0W5wVuv/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicRetrogames.module.css"; // plasmic-import: B9r13xvT8S00/css

createPlasmicElementProxy;

export type PlasmicRetrogames__VariantMembers = {};
export type PlasmicRetrogames__VariantsArgs = {};
type VariantPropType = keyof PlasmicRetrogames__VariantsArgs;
export const PlasmicRetrogames__VariantProps = new Array<VariantPropType>();

export type PlasmicRetrogames__ArgsType = {};
type ArgPropType = keyof PlasmicRetrogames__ArgsType;
export const PlasmicRetrogames__ArgProps = new Array<ArgPropType>();

export type PlasmicRetrogames__OverridesType = {
  root?: Flex__<"div">;
  navbarPixel?: Flex__<typeof NavbarPixel>;
  footerPixel?: Flex__<typeof FooterPixel>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultRetrogamesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRetrogames__RenderFunc(props: {
  variants: PlasmicRetrogames__VariantsArgs;
  args: PlasmicRetrogames__ArgsType;
  overrides: PlasmicRetrogames__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicRetrogames.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicRetrogames.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicRetrogames.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicRetrogames.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicRetrogames.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicRetrogames.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicRetrogames.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicRetrogames.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicRetrogames.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavbarPixel
            data-plasmic-name={"navbarPixel"}
            data-plasmic-override={overrides.navbarPixel}
            className={classNames("__wab_instance", sty.navbarPixel)}
          />

          <FooterPixel
            data-plasmic-name={"footerPixel"}
            data-plasmic-override={overrides.footerPixel}
            className={classNames("__wab_instance", sty.footerPixel)}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9278519288082067"\r\n     crossorigin="anonymous"></script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbarPixel", "footerPixel", "embedHtml"],
  navbarPixel: ["navbarPixel"],
  footerPixel: ["footerPixel"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarPixel: typeof NavbarPixel;
  footerPixel: typeof FooterPixel;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRetrogames__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRetrogames__VariantsArgs;
    args?: PlasmicRetrogames__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRetrogames__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRetrogames__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRetrogames__ArgProps,
          internalVariantPropNames: PlasmicRetrogames__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRetrogames__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRetrogames";
  } else {
    func.displayName = `PlasmicRetrogames.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicRetrogames = Object.assign(
  // Top-level PlasmicRetrogames renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbarPixel: makeNodeComponent("navbarPixel"),
    footerPixel: makeNodeComponent("footerPixel"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicRetrogames
    internalVariantProps: PlasmicRetrogames__VariantProps,
    internalArgProps: PlasmicRetrogames__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - retro games🌸",
      description: "~modded retro gaming devices from disuko",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/retro"
    }
  }
);

export default PlasmicRetrogames;
/* prettier-ignore-end */
