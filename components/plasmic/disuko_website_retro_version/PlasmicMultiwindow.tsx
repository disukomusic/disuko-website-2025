/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: agRDam8zA0LH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicMultiwindow.module.css"; // plasmic-import: agRDam8zA0LH/css

import NounPixelHeart10989631SvgIcon from "./icons/PlasmicIcon__NounPixelHeart10989631Svg"; // plasmic-import: tvndHRt1AD9R/icon

createPlasmicElementProxy;

export type PlasmicMultiwindow__VariantMembers = {};
export type PlasmicMultiwindow__VariantsArgs = {};
type VariantPropType = keyof PlasmicMultiwindow__VariantsArgs;
export const PlasmicMultiwindow__VariantProps = new Array<VariantPropType>();

export type PlasmicMultiwindow__ArgsType = {
  windowTitle?: string;
  window2Title?: string;
  windowText?: string;
  window2Text?: string;
  windowImage?: React.ReactNode;
  show1Image?: boolean;
  windowImage2?: React.ReactNode;
  show2Image?: boolean;
};
type ArgPropType = keyof PlasmicMultiwindow__ArgsType;
export const PlasmicMultiwindow__ArgProps = new Array<ArgPropType>(
  "windowTitle",
  "window2Title",
  "windowText",
  "window2Text",
  "windowImage",
  "show1Image",
  "windowImage2",
  "show2Image"
);

export type PlasmicMultiwindow__OverridesType = {
  root?: Flex__<"div">;
  window?: Flex__<"a"> & Partial<LinkProps>;
  xButton3?: Flex__<"a"> & Partial<LinkProps>;
  window2?: Flex__<"a"> & Partial<LinkProps>;
  xButton2?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultMultiwindowProps {
  windowTitle?: string;
  window2Title?: string;
  windowText?: string;
  window2Text?: string;
  windowImage?: React.ReactNode;
  show1Image?: boolean;
  windowImage2?: React.ReactNode;
  show2Image?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMultiwindow__RenderFunc(props: {
  variants: PlasmicMultiwindow__VariantsArgs;
  args: PlasmicMultiwindow__ArgsType;
  overrides: PlasmicMultiwindow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          windowTitle: "Window Title",
          window2Title: "Window 2 Title",
          windowText: "Lorem Impsum or something",
          window2Text: "Lorem Ipsum or someinthg",
          show1Image: false,
          show2Image: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "closeWindow1",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "closeWindow22",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"window"}
        data-plasmic-override={overrides.window}
        className={classNames(projectcss.all, projectcss.a, sty.window)}
        component={Link}
        href={(() => {
          try {
            return $props.linkDestination;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8SkNa)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8FgD
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.windowTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Music Production";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <PlasmicLink__
            data-plasmic-name={"xButton3"}
            data-plasmic-override={overrides.xButton3}
            className={classNames(projectcss.all, projectcss.a, sty.xButton3)}
            component={Link}
            href={(() => {
              try {
                return $props.linkDestination;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onClick={async event => {
              const $steps = {};

              $steps["updateVariant"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      undefined;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateVariant"] != null &&
                typeof $steps["updateVariant"] === "object" &&
                typeof $steps["updateVariant"].then === "function"
              ) {
                $steps["updateVariant"] = await $steps["updateVariant"];
              }
            }}
            platform={"nextjs"}
          >
            <NounPixelHeart10989631SvgIcon
              className={classNames(projectcss.all, sty.svg__uutFn)}
              role={"img"}
            />
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xA80D)}>
          {(() => {
            try {
              return $props.show1Image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
            ? renderPlasmicSlot({
                defaultContents: (() => {
                  try {
                    return $props.show1Image;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zmw1L)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                  />
                ) : null,
                value: args.windowImage
              })
            : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__knWlP
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.windowText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "i release all kinds of electronic music on various streaming platforms like bandcamp, spotify, and itunes! go check it out!";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </PlasmicLink__>
      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <PlasmicLink__
          data-plasmic-name={"window2"}
          data-plasmic-override={overrides.window2}
          className={classNames(projectcss.all, projectcss.a, sty.window2)}
          component={Link}
          href={(() => {
            try {
              return $props.linkDestination;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["updateCloseWindow22"] = true
              ? (() => {
                  const actionArgs = {
                    operation: 0,
                    variable: {
                      objRoot: $state,
                      variablePath: ["closeWindow22"]
                    },
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCloseWindow22"] != null &&
              typeof $steps["updateCloseWindow22"] === "object" &&
              typeof $steps["updateCloseWindow22"].then === "function"
            ) {
              $steps["updateCloseWindow22"] = await $steps[
                "updateCloseWindow22"
              ];
            }
          }}
          platform={"nextjs"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__crFjB)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zeo2P
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.window2Title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Music Production";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <PlasmicLink__
              data-plasmic-name={"xButton2"}
              data-plasmic-override={overrides.xButton2}
              className={classNames(projectcss.all, projectcss.a, sty.xButton2)}
              component={Link}
              href={(() => {
                try {
                  return $props.linkDestination;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateVariant"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateVariant"] != null &&
                  typeof $steps["updateVariant"] === "object" &&
                  typeof $steps["updateVariant"].then === "function"
                ) {
                  $steps["updateVariant"] = await $steps["updateVariant"];
                }
              }}
              platform={"nextjs"}
            >
              <NounPixelHeart10989631SvgIcon
                className={classNames(projectcss.all, sty.svg__qnhij)}
                role={"img"}
              />
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zCmAd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lvDe
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.window2Text;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Lorem Ipsum";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return $props.show2Image;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
              ? renderPlasmicSlot({
                  defaultContents: (() => {
                    try {
                      return $props.show1Image;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uogRy)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                    />
                  ) : null,
                  value: args.windowImage2
                })
              : null}
          </div>
        </PlasmicLink__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "window", "xButton3", "window2", "xButton2"],
  window: ["window", "xButton3"],
  xButton3: ["xButton3"],
  window2: ["window2", "xButton2"],
  xButton2: ["xButton2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  window: "a";
  xButton3: "a";
  window2: "a";
  xButton2: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMultiwindow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMultiwindow__VariantsArgs;
    args?: PlasmicMultiwindow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMultiwindow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMultiwindow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMultiwindow__ArgProps,
          internalVariantPropNames: PlasmicMultiwindow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMultiwindow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultiwindow";
  } else {
    func.displayName = `PlasmicMultiwindow.${nodeName}`;
  }
  return func;
}

export const PlasmicMultiwindow = Object.assign(
  // Top-level PlasmicMultiwindow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    window: makeNodeComponent("window"),
    xButton3: makeNodeComponent("xButton3"),
    window2: makeNodeComponent("window2"),
    xButton2: makeNodeComponent("xButton2"),

    // Metadata about props expected for PlasmicMultiwindow
    internalVariantProps: PlasmicMultiwindow__VariantProps,
    internalArgProps: PlasmicMultiwindow__ArgProps
  }
);

export default PlasmicMultiwindow;
/* prettier-ignore-end */
