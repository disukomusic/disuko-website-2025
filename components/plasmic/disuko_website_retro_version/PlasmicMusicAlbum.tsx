/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: xhHvzxTdb1Y8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Tilt from "@plasmicpkgs/react-parallax-tilt";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicMusicAlbum.module.css"; // plasmic-import: xhHvzxTdb1Y8/css

import BrandSpotifySvgIcon from "./icons/PlasmicIcon__BrandSpotifySvg"; // plasmic-import: Ezp_TCh0SsEl/icon
import BrandAppleSvgIcon from "./icons/PlasmicIcon__BrandAppleSvg"; // plasmic-import: 2kghRMT1oj_X/icon
import BrandBandcampSvgIcon from "./icons/PlasmicIcon__BrandBandcampSvg"; // plasmic-import: 65hkbHVvIUOy/icon
import BrandYoutubeSvgIcon from "./icons/PlasmicIcon__BrandYoutubeSvg"; // plasmic-import: lDUI8t8B7I6-/icon

createPlasmicElementProxy;

export type PlasmicMusicAlbum__VariantMembers = {};
export type PlasmicMusicAlbum__VariantsArgs = {};
type VariantPropType = keyof PlasmicMusicAlbum__VariantsArgs;
export const PlasmicMusicAlbum__VariantProps = new Array<VariantPropType>();

export type PlasmicMusicAlbum__ArgsType = {
  albumArt?: React.ComponentProps<typeof PlasmicImg__>["src"];
  description?: string;
  spotifyLink?: string;
  appleMusicLink?: string;
  bandcampLink?: string;
  youTubeLink?: string;
};
type ArgPropType = keyof PlasmicMusicAlbum__ArgsType;
export const PlasmicMusicAlbum__ArgProps = new Array<ArgPropType>(
  "albumArt",
  "description",
  "spotifyLink",
  "appleMusicLink",
  "bandcampLink",
  "youTubeLink"
);

export type PlasmicMusicAlbum__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  buttons?: Flex__<"div">;
  spotify?: Flex__<typeof AntdPopover>;
  appleMusic?: Flex__<typeof AntdPopover>;
  bandcamp?: Flex__<typeof AntdPopover>;
  youTube?: Flex__<typeof AntdPopover>;
  tilt?: Flex__<typeof Tilt>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultMusicAlbumProps {
  albumArt?: React.ComponentProps<typeof PlasmicImg__>["src"];
  description?: string;
  spotifyLink?: string;
  appleMusicLink?: string;
  bandcampLink?: string;
  youTubeLink?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMusicAlbum__RenderFunc(props: {
  variants: PlasmicMusicAlbum__VariantsArgs;
  args: PlasmicMusicAlbum__ArgsType;
  overrides: PlasmicMusicAlbum__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          albumArt: {
            src: "/plasmic/disuko_website_retro_version/images/logo2023Png.png",
            fullWidth: 2000,
            fullHeight: 2000,
            aspectRatio: undefined
          },
          description: "Lorem Ipsum or something",
          spotifyLink: "https://open.spotify.com/artist/7miowOQruHb1GpKBlV4tjl"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "spotify.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "appleMusic.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bandcamp.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "youTube.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Interdimensional Ice Cream Parlor - 11 Track Multigenre Hardcore Album";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"buttons"}
        data-plasmic-override={overrides.buttons}
        hasGap={true}
        className={classNames(projectcss.all, sty.buttons)}
      >
        <AntdPopover
          data-plasmic-name={"spotify"}
          data-plasmic-override={overrides.spotify}
          arrow={true}
          className={classNames("__wab_instance", sty.spotify)}
          content={null}
          contentText={"Spotify"}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          mouseEnterDelay={0}
          mouseLeaveDelay={0}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["spotify", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["spotify", "open"])}
          placement={"bottom"}
          popoverScopeClassName={sty["spotify__popover"]}
          title={null}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__nSoMy
            )}
            component={Link}
            href={args.spotifyLink}
            platform={"nextjs"}
            target={"_blank"}
          >
            <BrandSpotifySvgIcon
              className={classNames(projectcss.all, sty.svg__mYrPz)}
              role={"img"}
            />
          </PlasmicLink__>
        </AntdPopover>
        <AntdPopover
          data-plasmic-name={"appleMusic"}
          data-plasmic-override={overrides.appleMusic}
          arrow={true}
          className={classNames("__wab_instance", sty.appleMusic)}
          content={null}
          contentText={"Apple Music"}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          mouseEnterDelay={0}
          mouseLeaveDelay={0}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["appleMusic", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["appleMusic", "open"])}
          placement={"bottom"}
          popoverScopeClassName={sty["appleMusic__popover"]}
          title={null}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__r9Psl
            )}
            component={Link}
            href={args.appleMusicLink}
            platform={"nextjs"}
            target={"_blank"}
          >
            <BrandAppleSvgIcon
              className={classNames(projectcss.all, sty.svg__n8A8S)}
              role={"img"}
            />
          </PlasmicLink__>
        </AntdPopover>
        <AntdPopover
          data-plasmic-name={"bandcamp"}
          data-plasmic-override={overrides.bandcamp}
          arrow={true}
          className={classNames("__wab_instance", sty.bandcamp)}
          content={null}
          contentText={"Bandcamp"}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          mouseEnterDelay={0}
          mouseLeaveDelay={0}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["bandcamp", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["bandcamp", "open"])}
          placement={"bottom"}
          popoverScopeClassName={sty["bandcamp__popover"]}
          title={null}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__xChzL
            )}
            component={Link}
            href={args.bandcampLink}
            platform={"nextjs"}
            target={"_blank"}
          >
            <BrandBandcampSvgIcon
              className={classNames(projectcss.all, sty.svg__upZcy)}
              role={"img"}
            />
          </PlasmicLink__>
        </AntdPopover>
        <AntdPopover
          data-plasmic-name={"youTube"}
          data-plasmic-override={overrides.youTube}
          arrow={true}
          className={classNames("__wab_instance", sty.youTube)}
          content={null}
          contentText={"YouTube"}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens
          )}
          mouseEnterDelay={0}
          mouseLeaveDelay={0}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["youTube", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["youTube", "open"])}
          placement={"bottom"}
          popoverScopeClassName={sty["youTube__popover"]}
          title={null}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__b8LoC
            )}
            component={Link}
            href={args.youTubeLink}
            platform={"nextjs"}
            target={"_blank"}
          >
            <BrandYoutubeSvgIcon
              className={classNames(projectcss.all, sty.svg__akcq)}
              role={"img"}
            />
          </PlasmicLink__>
        </AntdPopover>
      </Stack__>
      <Tilt
        data-plasmic-name={"tilt"}
        data-plasmic-override={overrides.tilt}
        className={classNames("__wab_instance", sty.tilt)}
        glareEnable={true}
        glareMaxOpacity={0.2}
        glarePosition={"top"}
        tiltMaxAngleX={3}
        tiltMaxAngleY={3}
        tiltReverse={true}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={args.albumArt}
        />
      </Tilt>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "buttons",
    "spotify",
    "appleMusic",
    "bandcamp",
    "youTube",
    "tilt",
    "img"
  ],
  text: ["text"],
  buttons: ["buttons", "spotify", "appleMusic", "bandcamp", "youTube"],
  spotify: ["spotify"],
  appleMusic: ["appleMusic"],
  bandcamp: ["bandcamp"],
  youTube: ["youTube"],
  tilt: ["tilt", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  buttons: "div";
  spotify: typeof AntdPopover;
  appleMusic: typeof AntdPopover;
  bandcamp: typeof AntdPopover;
  youTube: typeof AntdPopover;
  tilt: typeof Tilt;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMusicAlbum__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMusicAlbum__VariantsArgs;
    args?: PlasmicMusicAlbum__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMusicAlbum__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMusicAlbum__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMusicAlbum__ArgProps,
          internalVariantPropNames: PlasmicMusicAlbum__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMusicAlbum__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMusicAlbum";
  } else {
    func.displayName = `PlasmicMusicAlbum.${nodeName}`;
  }
  return func;
}

export const PlasmicMusicAlbum = Object.assign(
  // Top-level PlasmicMusicAlbum renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    buttons: makeNodeComponent("buttons"),
    spotify: makeNodeComponent("spotify"),
    appleMusic: makeNodeComponent("appleMusic"),
    bandcamp: makeNodeComponent("bandcamp"),
    youTube: makeNodeComponent("youTube"),
    tilt: makeNodeComponent("tilt"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMusicAlbum
    internalVariantProps: PlasmicMusicAlbum__VariantProps,
    internalArgProps: PlasmicMusicAlbum__ArgProps
  }
);

export default PlasmicMusicAlbum;
/* prettier-ignore-end */
