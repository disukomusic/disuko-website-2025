/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: T3-8dI7L0stN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicNavbarPixel.module.css"; // plasmic-import: T3-8dI7L0stN/css

import Menu2SvgIcon from "./icons/PlasmicIcon__Menu2Svg"; // plasmic-import: 4K5AtHD7Sm9b/icon
import XSvgIcon from "./icons/PlasmicIcon__XSvg"; // plasmic-import: EpD6VZmHLNkz/icon

createPlasmicElementProxy;

export type PlasmicNavbarPixel__VariantMembers = {};
export type PlasmicNavbarPixel__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavbarPixel__VariantsArgs;
export const PlasmicNavbarPixel__VariantProps = new Array<VariantPropType>();

export type PlasmicNavbarPixel__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarPixel__ArgsType;
export const PlasmicNavbarPixel__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarPixel__OverridesType = {
  root?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  home?: Flex__<"a"> & Partial<LinkProps>;
  portfolio?: Flex__<"a"> & Partial<LinkProps>;
  music?: Flex__<"a"> & Partial<LinkProps>;
  merch?: Flex__<"a"> & Partial<LinkProps>;
  links?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultNavbarPixelProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavbarPixel__RenderFunc(props: {
  variants: PlasmicNavbarPixel__VariantsArgs;
  args: PlasmicNavbarPixel__ArgsType;
  overrides: PlasmicNavbarPixel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();

  return (
    <NavigationBar
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      brand={
        <Reveal
          cascade={false}
          className={classNames("__wab_instance", sty.reveal___02HE5)}
          damping={1}
          direction={"down"}
          duration={1000}
          effect={"bounce"}
          reverse={false}
          triggerOnce={true}
        >
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__j0UKe)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/disukoPixelPng.png",
                fullWidth: 640,
                fullHeight: 160,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
        </Reveal>
      }
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      closeButton={
        <XSvgIcon
          className={classNames(projectcss.all, sty.svg__swx8)}
          role={"img"}
        />
      }
      forceOpenMenu={
        hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
      }
      itemsGap={hasVariant(globalVariants, "screen", "mobileOnly") ? 8 : 8}
      menuItems={
        <React.Fragment>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__j1Fjv)}
            delay={100}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <PlasmicLink__
              data-plasmic-name={"home"}
              data-plasmic-override={overrides.home}
              className={classNames(projectcss.all, projectcss.a, sty.home)}
              component={Link}
              href={`/`}
              platform={"nextjs"}
              title={"home"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___6HJld)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "5%"
                    : "30%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/homePng5.png",
                  fullWidth: 160,
                  fullHeight: 150,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wJbNi
                )}
              >
                {"Home"}
              </div>
            </PlasmicLink__>
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__omh04)}
            delay={200}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <PlasmicLink__
              data-plasmic-name={"portfolio"}
              data-plasmic-override={overrides.portfolio}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.portfolio
              )}
              component={Link}
              platform={"nextjs"}
              title={"portfolio"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z8Ioq)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "5%"
                    : "30%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/portfoflioPng2.png",
                  fullWidth: 160,
                  fullHeight: 150,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aheBe
                  )}
                >
                  {"Portfolio"}
                </div>
              ) : null}
            </PlasmicLink__>
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__wsz3F)}
            delay={300}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <PlasmicLink__
              data-plasmic-name={"music"}
              data-plasmic-override={overrides.music}
              className={classNames(projectcss.all, projectcss.a, sty.music)}
              component={Link}
              href={`/music`}
              platform={"nextjs"}
              title={"music"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ypuC)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "5%"
                    : "30%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/musicPng3.png",
                  fullWidth: 160,
                  fullHeight: 150,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nk5Da
                  )}
                >
                  {"Music"}
                </div>
              ) : null}
            </PlasmicLink__>
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal___141ER)}
            delay={400}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <PlasmicLink__
              data-plasmic-name={"merch"}
              data-plasmic-override={overrides.merch}
              className={classNames(projectcss.all, projectcss.a, sty.merch)}
              component={Link}
              href={"https://merch.disuko.gay"}
              platform={"nextjs"}
              title={"merch"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___0Je8G)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "5%"
                    : "30%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/shirtPng3.png",
                  fullWidth: 160,
                  fullHeight: 130,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9ZyGc
                  )}
                >
                  {"Merch"}
                </div>
              ) : null}
            </PlasmicLink__>
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__yZ3DQ)}
            delay={500}
            direction={"down"}
            effect={"bounce"}
            triggerOnce={true}
          >
            <PlasmicLink__
              data-plasmic-name={"links"}
              data-plasmic-override={overrides.links}
              className={classNames(projectcss.all, projectcss.a, sty.links)}
              component={Link}
              href={`/links`}
              platform={"nextjs"}
              title={"links"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__saGkj)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "5%"
                    : "30%"
                }
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/linksPng2.png",
                  fullWidth: 160,
                  fullHeight: 160,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ef5AP
                  )}
                >
                  {"Links"}
                </div>
              ) : null}
            </PlasmicLink__>
          </Reveal>
        </React.Fragment>
      }
      openButton={
        <Menu2SvgIcon
          className={classNames(projectcss.all, sty.svg__we8Dp)}
          role={"img"}
        />
      }
      responsiveBreakpoint={768}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "home", "portfolio", "music", "merch", "links"],
  link: ["link"],
  home: ["home"],
  portfolio: ["portfolio"],
  music: ["music"],
  merch: ["merch"],
  links: ["links"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof NavigationBar;
  link: "a";
  home: "a";
  portfolio: "a";
  music: "a";
  merch: "a";
  links: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarPixel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarPixel__VariantsArgs;
    args?: PlasmicNavbarPixel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarPixel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarPixel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbarPixel__ArgProps,
          internalVariantPropNames: PlasmicNavbarPixel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbarPixel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarPixel";
  } else {
    func.displayName = `PlasmicNavbarPixel.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarPixel = Object.assign(
  // Top-level PlasmicNavbarPixel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    home: makeNodeComponent("home"),
    portfolio: makeNodeComponent("portfolio"),
    music: makeNodeComponent("music"),
    merch: makeNodeComponent("merch"),
    links: makeNodeComponent("links"),

    // Metadata about props expected for PlasmicNavbarPixel
    internalVariantProps: PlasmicNavbarPixel__VariantProps,
    internalArgProps: PlasmicNavbarPixel__ArgProps
  }
);

export default PlasmicNavbarPixel;
/* prettier-ignore-end */
