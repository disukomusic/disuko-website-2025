/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: 1AxjPUmLarmm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import WindowBlue from "../../WindowBlue"; // plasmic-import: QxkFplM-x8NR/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicLinks.module.css"; // plasmic-import: 1AxjPUmLarmm/css

import NounPixelHeart10989631SvgIcon from "./icons/PlasmicIcon__NounPixelHeart10989631Svg"; // plasmic-import: tvndHRt1AD9R/icon

createPlasmicElementProxy;

export type PlasmicLinks__VariantMembers = {};
export type PlasmicLinks__VariantsArgs = {};
type VariantPropType = keyof PlasmicLinks__VariantsArgs;
export const PlasmicLinks__VariantProps = new Array<VariantPropType>();

export type PlasmicLinks__ArgsType = {};
type ArgPropType = keyof PlasmicLinks__ArgsType;
export const PlasmicLinks__ArgProps = new Array<ArgPropType>();

export type PlasmicLinks__OverridesType = {
  root?: Flex__<"div">;
  windowButton?: Flex__<typeof WindowButton>;
  popover?: Flex__<typeof AntdPopover>;
  svg?: Flex__<"svg">;
  main?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  columns?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultLinksProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinks__RenderFunc(props: {
  variants: PlasmicLinks__VariantsArgs;
  args: PlasmicLinks__ArgsType;
  overrides: PlasmicLinks__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdmuurUfQuA6N(),
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicLinks.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLinks.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLinks.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicLinks.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicLinks.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicLinks.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicLinks.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicLinks.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicLinks.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              ),
              [projectcss.global_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <WindowButton
            data-plasmic-name={"windowButton"}
            data-plasmic-override={overrides.windowButton}
            className={classNames("__wab_instance", sty.windowButton)}
          >
            <AntdPopover
              data-plasmic-name={"popover"}
              data-plasmic-override={overrides.popover}
              arrow={true}
              className={classNames("__wab_instance", sty.popover)}
              content={null}
              contentText={"Back To Main Website"}
              defaultStylesClassName={classNames(
                projectcss.root_reset,
                projectcss.plasmic_default_styles,
                projectcss.plasmic_mixins,
                projectcss.plasmic_tokens,
                plasmic_antd_5_hostless_css.plasmic_tokens,
                plasmic_plasmic_rich_components_css.plasmic_tokens,
                {
                  [projectcss.global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  ),
                  [projectcss.global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                }
              )}
              mouseEnterDelay={0}
              mouseLeaveDelay={0}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["popover", "open"]).apply(
                  null,
                  eventArgs
                );
              }}
              open={generateStateValueProp($state, ["popover", "open"])}
              placement={"right"}
              popoverScopeClassName={sty["popover__popover"]}
              title={null}
              trigger={"hover"}
            >
              <NounPixelHeart10989631SvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </AntdPopover>
          </WindowButton>
          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"103px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/logo2023Png.png",
                fullWidth: 2000,
                fullHeight: 2000,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0OQyz
              )}
            >
              {"disuko"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gBMn
              )}
            >
              {
                "Hi everyone! My name is Disuko. I'm a producer, DJ, and content creator!"
              }
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__lEeu1)}
              >
                <WindowBlue
                  className={classNames("__wab_instance", sty.windowBlue__bEdW)}
                  linkDestination={
                    "https://www.etsy.com/shop/sukosstickers/?etsrc=sdt"
                  }
                  windowText={"Stickers Restocked!"}
                  windowTitle={"Etsy Store"}
                />

                <WindowBlue
                  className={classNames(
                    "__wab_instance",
                    sty.windowBlue__e5Yer
                  )}
                  linkDestination={`/commissions`}
                  windowText={"Art Commission Status"}
                  windowTitle={"Commission Status"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gSsL7
                    )}
                  >
                    {"Open!"}
                  </div>
                </WindowBlue>
                <WindowBlue
                  className={classNames(
                    "__wab_instance",
                    sty.windowBlue__zayv2
                  )}
                  linkDestination={`/retro`}
                  windowText={"Gameboy Commission Status"}
                  windowTitle={"Commission Status"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g4Tle
                    )}
                  >
                    {"Open!"}
                  </div>
                </WindowBlue>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__vdXak)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__uBnKr)}
                  linkDestination={
                    "https://open.spotify.com/artist/7miowOQruHb1GpKBlV4tjl"
                  }
                  windowText={"Spotify"}
                  windowTitle={"Spotify"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__r2YN)}
                  linkDestination={
                    "https://music.apple.com/us/artist/disuko/1497273303"
                  }
                  windowText={"Apple Music"}
                  windowTitle={"Apple Music"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__kg8ZI)}
                  linkDestination={"https://disuko.bandcamp.com/"}
                  windowText={"Bandcamp"}
                  windowTitle={"Bandcamp"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__klC6Z)}
                  linkDestination={"https://soundcloud.com/disukomusic"}
                  windowText={"Soundcloud"}
                  windowTitle={"Soundcloud"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__y8P7)}
                  linkDestination={
                    "https://music.youtube.com/channel/UCXSnf4u6EW7f18uJyDDlpeg"
                  }
                  windowText={"YouTube Music"}
                  windowTitle={"YouTube Music"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__eDtWq)}
                  linkDestination={"https://bsky.app/profile/disuko.gay"}
                  windowText={"Bluesky"}
                  windowTitle={"Bluesky"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__vzDz1)}
                  linkDestination={"https://instagram.com/disukomusic"}
                  windowText={"Instagram"}
                  windowTitle={"Instagram"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__c5IUf)}
                  linkDestination={"https://youtube.com/disuko"}
                  windowText={"YouTube"}
                  windowTitle={"YouTube"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__wH23A)}
                  linkDestination={"https://youtube.com/@disukoflips"}
                  windowText={"Balisong YouTube"}
                  windowTitle={"Balisong Youtube"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__z0T2Z)}
                  linkDestination={"https://discord.gg/X2cTAwWsVT"}
                  windowText={"Discord"}
                  windowTitle={"Discord"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window___4Ihlp)}
                  linkDestination={"https://twitter.com/sukocloud"}
                  windowText={"Twitter"}
                  windowTitle={"Twitter"}
                />
              </Stack__>
              <div className={classNames(projectcss.all, sty.column__gz0D5)} />
            </div>
          </Stack__>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9278519288082067"\r\n     crossorigin="anonymous"></script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "windowButton",
    "popover",
    "svg",
    "main",
    "img",
    "columns",
    "embedHtml"
  ],
  windowButton: ["windowButton", "popover", "svg"],
  popover: ["popover", "svg"],
  svg: ["svg"],
  main: ["main", "img", "columns"],
  img: ["img"],
  columns: ["columns"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  windowButton: typeof WindowButton;
  popover: typeof AntdPopover;
  svg: "svg";
  main: "div";
  img: typeof PlasmicImg__;
  columns: "div";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinks__VariantsArgs;
    args?: PlasmicLinks__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLinks__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinks__ArgProps,
          internalVariantPropNames: PlasmicLinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinks";
  } else {
    func.displayName = `PlasmicLinks.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicLinks = Object.assign(
  // Top-level PlasmicLinks renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    windowButton: makeNodeComponent("windowButton"),
    popover: makeNodeComponent("popover"),
    svg: makeNodeComponent("svg"),
    main: makeNodeComponent("main"),
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicLinks
    internalVariantProps: PlasmicLinks__VariantProps,
    internalArgProps: PlasmicLinks__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - links 🌸",
      description:
        "~social media platforms and other important links for the disuko youtube channel and streaming services.",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/links"
    }
  }
);

export default PlasmicLinks;
/* prettier-ignore-end */
