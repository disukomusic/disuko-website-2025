// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: KZYdo-R8GYAn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicWindowButton.module.css"; // plasmic-import: KZYdo-R8GYAn/css

import HomeSvgIcon from "./icons/PlasmicIcon__HomeSvg"; // plasmic-import: 6Ekm8Isg67LL/icon

createPlasmicElementProxy;

export type PlasmicWindowButton__VariantMembers = {};
export type PlasmicWindowButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicWindowButton__VariantsArgs;
export const PlasmicWindowButton__VariantProps = new Array<VariantPropType>();

export type PlasmicWindowButton__ArgsType = {
  children?: React.ReactNode;
  link?: string;
  verticalPad?: number;
  horizantalPad?: number;
  hoverText?: string;
};
type ArgPropType = keyof PlasmicWindowButton__ArgsType;
export const PlasmicWindowButton__ArgProps = new Array<ArgPropType>(
  "children",
  "link",
  "verticalPad",
  "horizantalPad",
  "hoverText"
);

export type PlasmicWindowButton__OverridesType = {
  button?: Flex__<"a"> & Partial<LinkProps>;
  h5?: Flex__<"h5">;
};

export interface DefaultWindowButtonProps {
  children?: React.ReactNode;
  link?: string;
  verticalPad?: number;
  horizantalPad?: number;
  hoverText?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWindowButton__RenderFunc(props: {
  variants: PlasmicWindowButton__VariantsArgs;
  args: PlasmicWindowButton__ArgsType;
  overrides: PlasmicWindowButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          link: `/`,

          verticalPad: 10
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <PlasmicLink__
      data-plasmic-name={"button"}
      data-plasmic-override={overrides.button}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.button
      )}
      component={Link}
      href={args.link}
      platform={"nextjs"}
      title={(() => {
        try {
          return $props.hoverText;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <h5
        data-plasmic-name={"h5"}
        data-plasmic-override={overrides.h5}
        className={classNames(
          projectcss.all,
          projectcss.h5,
          projectcss.__wab_text,
          sty.h5
        )}
      >
        {"home"}
      </h5>
      <div className={classNames(projectcss.all, sty.freeBox__pw2SB)}>
        <div className={classNames(projectcss.all, sty.freeBox__imu2C)}>
          {renderPlasmicSlot({
            defaultContents: (
              <HomeSvgIcon
                className={classNames(projectcss.all, sty.svg__jPi1B)}
                role={"img"}
              />
            ),

            value: args.children
          })}
        </div>
      </div>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  button: ["button", "h5"],
  h5: ["h5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  button: "a";
  h5: "h5";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWindowButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWindowButton__VariantsArgs;
    args?: PlasmicWindowButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWindowButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWindowButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWindowButton__ArgProps,
          internalVariantPropNames: PlasmicWindowButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWindowButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "button") {
    func.displayName = "PlasmicWindowButton";
  } else {
    func.displayName = `PlasmicWindowButton.${nodeName}`;
  }
  return func;
}

export const PlasmicWindowButton = Object.assign(
  // Top-level PlasmicWindowButton renders the root element
  makeNodeComponent("button"),
  {
    // Helper components rendering sub-elements
    h5: makeNodeComponent("h5"),

    // Metadata about props expected for PlasmicWindowButton
    internalVariantProps: PlasmicWindowButton__VariantProps,
    internalArgProps: PlasmicWindowButton__ArgProps
  }
);

export default PlasmicWindowButton;
/* prettier-ignore-end */
