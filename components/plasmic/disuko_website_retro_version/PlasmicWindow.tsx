// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: BWjgdOwFY_OO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicWindow.module.css"; // plasmic-import: BWjgdOwFY_OO/css

import NounPixelHeart10989631SvgIcon from "./icons/PlasmicIcon__NounPixelHeart10989631Svg"; // plasmic-import: tvndHRt1AD9R/icon

createPlasmicElementProxy;

export type PlasmicWindow__VariantMembers = {};
export type PlasmicWindow__VariantsArgs = {};
type VariantPropType = keyof PlasmicWindow__VariantsArgs;
export const PlasmicWindow__VariantProps = new Array<VariantPropType>();

export type PlasmicWindow__ArgsType = {
  windowTitle?: string;
  windowText?: string;
  linkDestination?: string;
  showImage?: boolean;
  windowImage?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWindow__ArgsType;
export const PlasmicWindow__ArgProps = new Array<ArgPropType>(
  "windowTitle",
  "windowText",
  "linkDestination",
  "showImage",
  "windowImage",
  "children"
);

export type PlasmicWindow__OverridesType = {
  window?: Flex__<"a"> & Partial<LinkProps>;
  xButton?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
};

export interface DefaultWindowProps {
  windowTitle?: string;
  windowText?: string;
  linkDestination?: string;
  showImage?: boolean;
  windowImage?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWindow__RenderFunc(props: {
  variants: PlasmicWindow__VariantsArgs;
  args: PlasmicWindow__ArgsType;
  overrides: PlasmicWindow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          windowTitle: "Window Title",
          windowText: "Lorem Impsum or something",
          showImage: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <PlasmicLink__
      data-plasmic-name={"window"}
      data-plasmic-override={overrides.window}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.window,
        {
          [projectcss.global_theme_classic]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          ),
          [sty.windowglobal_theme_classic]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        }
      )}
      component={Link}
      href={(() => {
        try {
          return $props.linkDestination;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"nextjs"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__jCwp4, {
          [sty.freeBoxglobal_theme_classic__jCwp4ENktM]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rogWw,
            {
              [sty.textglobal_theme_classic__rogWweNktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.windowTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Music Production";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicLink__
          data-plasmic-name={"xButton"}
          data-plasmic-override={overrides.xButton}
          className={classNames(projectcss.all, projectcss.a, sty.xButton, {
            [sty.xButtonglobal_theme_classic]: hasVariant(
              globalVariants,
              "theme",
              "classic"
            )
          })}
          component={Link}
          href={(() => {
            try {
              return $props.linkDestination;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["updateVariant"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateVariant"] != null &&
              typeof $steps["updateVariant"] === "object" &&
              typeof $steps["updateVariant"].then === "function"
            ) {
              $steps["updateVariant"] = await $steps["updateVariant"];
            }
          }}
          platform={"nextjs"}
        >
          <NounPixelHeart10989631SvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
            role={"img"}
          />
        </PlasmicLink__>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__p2PhV, {
          [sty.freeBoxglobal_theme_classic__p2PhVeNktM]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        })}
      >
        {(() => {
          try {
            return $props.showImage;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (() => {
                try {
                  return $props.showImage;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ppAv6)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                />
              ) : null,
              value: args.windowImage
            })
          : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xZr7L,
            {
              [sty.textglobal_theme_classic__xZr7LeNktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.windowText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "i release all kinds of electronic music on various streaming platforms like bandcamp, spotify, and itunes! go check it out!";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__qiUj7)}>
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>
      </Stack__>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  window: ["window", "xButton", "svg"],
  xButton: ["xButton", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  window: "a";
  xButton: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWindow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWindow__VariantsArgs;
    args?: PlasmicWindow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWindow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWindow__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWindow__ArgProps,
          internalVariantPropNames: PlasmicWindow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWindow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "window") {
    func.displayName = "PlasmicWindow";
  } else {
    func.displayName = `PlasmicWindow.${nodeName}`;
  }
  return func;
}

export const PlasmicWindow = Object.assign(
  // Top-level PlasmicWindow renders the root element
  makeNodeComponent("window"),
  {
    // Helper components rendering sub-elements
    xButton: makeNodeComponent("xButton"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicWindow
    internalVariantProps: PlasmicWindow__VariantProps,
    internalArgProps: PlasmicWindow__ArgProps
  }
);

export default PlasmicWindow;
/* prettier-ignore-end */
