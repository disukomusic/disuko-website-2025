/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: -xYfq_7_R7j8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import YouTube from "@plasmicpkgs/react-youtube";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicNewMaqamCity.module.css"; // plasmic-import: -xYfq_7_R7j8/css

createPlasmicElementProxy;

export type PlasmicNewMaqamCity__VariantMembers = {};
export type PlasmicNewMaqamCity__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewMaqamCity__VariantsArgs;
export const PlasmicNewMaqamCity__VariantProps = new Array<VariantPropType>();

export type PlasmicNewMaqamCity__ArgsType = {};
type ArgPropType = keyof PlasmicNewMaqamCity__ArgsType;
export const PlasmicNewMaqamCity__ArgProps = new Array<ArgPropType>();

export type PlasmicNewMaqamCity__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  header?: Flex__<"section">;
  h2?: Flex__<"h2">;
  conceptPrototyping2?: Flex__<"section">;
  tabs?: Flex__<typeof AntdTabs>;
  collapse?: Flex__<typeof AntdSingleCollapse>;
  collapse2?: Flex__<typeof AntdSingleCollapse>;
  collapse3?: Flex__<typeof AntdSingleCollapse>;
  collapse4?: Flex__<typeof AntdSingleCollapse>;
  collapse5?: Flex__<typeof AntdSingleCollapse>;
  collapse6?: Flex__<typeof AntdSingleCollapse>;
  collapse7?: Flex__<typeof AntdSingleCollapse>;
  conceptPrototyping3?: Flex__<"section">;
  tabs2?: Flex__<typeof AntdTabs>;
  collapse8?: Flex__<typeof AntdSingleCollapse>;
  collapse9?: Flex__<typeof AntdSingleCollapse>;
  collapse10?: Flex__<typeof AntdSingleCollapse>;
  collapse11?: Flex__<typeof AntdSingleCollapse>;
  collapse12?: Flex__<typeof AntdSingleCollapse>;
  collapse16?: Flex__<typeof AntdSingleCollapse>;
  collapse17?: Flex__<typeof AntdSingleCollapse>;
  collapse18?: Flex__<typeof AntdSingleCollapse>;
  collapse19?: Flex__<typeof AntdSingleCollapse>;
  collapse20?: Flex__<typeof AntdSingleCollapse>;
  conceptPrototyping4?: Flex__<"section">;
  tabs3?: Flex__<typeof AntdTabs>;
  collapse21?: Flex__<typeof AntdSingleCollapse>;
  collapse22?: Flex__<typeof AntdSingleCollapse>;
  collapse23?: Flex__<typeof AntdSingleCollapse>;
  collapse24?: Flex__<typeof AntdSingleCollapse>;
  collapse25?: Flex__<typeof AntdSingleCollapse>;
  collapse26?: Flex__<typeof AntdSingleCollapse>;
  collapse27?: Flex__<typeof AntdSingleCollapse>;
  collapse28?: Flex__<typeof AntdSingleCollapse>;
  conceptPrototyping5?: Flex__<"section">;
  tabs4?: Flex__<typeof AntdTabs>;
  collapse31?: Flex__<typeof AntdSingleCollapse>;
  collapse30?: Flex__<typeof AntdSingleCollapse>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultNewMaqamCityProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewMaqamCity__RenderFunc(props: {
  variants: PlasmicNewMaqamCity__VariantsArgs;
  args: PlasmicNewMaqamCity__ArgsType;
  overrides: PlasmicNewMaqamCity__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse4.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse5.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse6.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse7.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "tabs2.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "collapse8.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse9.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse10.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse11.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse12.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse16.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse17.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse18.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse19.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse20.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "tabs3.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "collapse21.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse22.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse23.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse24.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse25.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse26.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse27.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse28.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "tabs4.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "collapse30.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse31.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicNewMaqamCity.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicNewMaqamCity.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicNewMaqamCity.pageMetadata.title}
        />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicNewMaqamCity.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicNewMaqamCity.pageMetadata.ogImageSrc}
        />
        <link
          rel="canonical"
          href={PlasmicNewMaqamCity.pageMetadata.canonical}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__hxHnj)}>
            <section
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4LYqF)}>
                <div className={classNames(projectcss.all, sty.freeBox__ns3Mf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qxMhE
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__qSnWs
                          )}
                        >
                          {"NEW MAQAM CITY"}
                        </h1>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oCidr
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2
                          )}
                        >
                          {"DESIGN WORKFLOW"}
                        </h2>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__frQg)}
                  displayHeight={"260px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"70%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image99.png",
                    fullWidth: 1280,
                    fullHeight: 720,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </section>
            <section
              data-plasmic-name={"conceptPrototyping2"}
              data-plasmic-override={overrides.conceptPrototyping2}
              className={classNames(projectcss.all, sty.conceptPrototyping2)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__lRf75
                )}
              >
                {"1 - CONCEPT"}
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__a7RdE)}
              >
                <div className={classNames(projectcss.all, sty.column__zlRPt)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jzcLt
                    )}
                  >
                    {
                      "In our preliminary meetings, we considered using a MIDI launchpad for sound and visual control, thanks to its simple, intuitive grid layout. The controller would be on a pedestal in the center, with projections and surround sound speakers arranged around it. As users press buttons on the launchpad, they would trigger different loops and corresponding projections on the surrounding walls and floor, ensuring continuous visual feedback even when looking down at the device. This section contains some initial ideas and thoughts that were had before making any major decisions!"
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__asnci)}>
                  <YouTube
                    className={classNames("__wab_instance", sty.youTube__eEPaK)}
                    videoId={"6F-ori0hmxs"}
                  />
                </div>
              </Stack__>
              <AntdTabs
                data-plasmic-name={"tabs"}
                data-plasmic-override={overrides.tabs}
                activeKey={generateStateValueProp($state, [
                  "tabs",
                  "activeKey"
                ])}
                animateTabBar={true}
                animateTabContent={true}
                animated={true}
                centered={true}
                className={classNames("__wab_instance", sty.tabs)}
                defaultActiveKey={"1"}
                items={
                  <React.Fragment>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__tkWnx
                      )}
                      key={"1"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l6LEv
                          )}
                        >
                          {"Audio"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lpjgE
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"MIDI"}
                          </span>
                          <React.Fragment> </React.Fragment>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wfHbc
                        )}
                      >
                        {
                          "\u25aa Loops and samples controlled within Ableton Live would be the main auditory feedback during use of the installation. As the user pressed buttons on the launchpad, loops would trigger. "
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__donla
                        )}
                      >
                        {
                          "\u25aaThese loops would be instruments from Muslim majority regions, but also with more modern electronic elements to fit the idea of Muslim futurism."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gMx8K
                        )}
                      >
                        {
                          "\u25aaAnother fun addition could be a piano keyboard MIDI controller also present to allow users with more knowledge of music to play along with the loops."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j0Se
                        )}
                      >
                        {
                          "The tricky part would be keeping all of these sounds consistent as the user adds to the song. They could all be in the same key and use the same chord progression, but then that limits the amount of variety during the experience. We'll have to use some kind of Ableton rack to tune the loops to be the same key."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ybvqP
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Speaker Setup"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5QbC
                        )}
                      >
                        {
                          "\u25aa If applicable, the audio would be set up with a surround sound system, so that sounds may come from all around the user. Specific elements could be panned around the room in expectant places. "
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cb9TM
                        )}
                      >
                        {
                          '\u25aa A subwoofer could also be placed in front of / near the user so that the "core" of the music can be felt. This might encourage them to dance along :)'
                        }
                      </div>
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__iNZsi
                      )}
                      key={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5A0Rd
                          )}
                        >
                          {"Visuals"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ii5Ib
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Projections"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tu9QK
                        )}
                      >
                        {
                          "\u25aa The main visual elements of the installation would be projected onto the walls and possibly floor of the space, mapped via software like TouchDesigner. There are two approaches to exactly *what* these visuals could look like:"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tXuyG
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Literal"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__reRn
                        )}
                      >
                        {
                          "\u25aa The visualizations would feature video of the various instruments that are present, in the form of overlapping composited together clips of them being played, as a sort of video collage. "
                        }
                      </div>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___1MvGv)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/setupConceptLiteralPng.png",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lKj6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Abstract"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9SCe7
                        )}
                      >
                        {
                          "\u25aa The visualizations would feature abstract interpretations of the instruments being played. Different colors, forms, and movements would correspond with the instruments. These would likely be particle based, and focus on light and movement."
                        }
                      </div>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__r5G5P)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/setupConceptAbstractPng.png",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pngFy
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Audio Reactivity"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ztPih
                        )}
                      >
                        {
                          "\u25aa I also see two ways that the visuals react to audio."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wkHh6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Direct"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zo6NM
                        )}
                      >
                        {
                          "\u25aa Separate tracks in our chosen audio software would trigger certain effects. A certain drum loop may activate a certain transformation, while a certain melodic loop may adjust saturation or change the visuals to be a certain hue."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zcrLl
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Multiband"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__huOj6
                        )}
                      >
                        {
                          "\u25aa The *final* result of the user's input would be visualized. For example, the intensity of low frequency band would activate a chromatic aberration effect, the mid frequency band would change the color of the visuals, and the high frequency band would activate a bloom effect."
                        }
                      </div>
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem___8ZY1N
                      )}
                      key={"3"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mr2Qp
                          )}
                        >
                          {"Software"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dmRDw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Audio Software"}
                          </span>
                        </React.Fragment>
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames("__wab_instance", sty.collapse),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tUgiK
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Ableton Live Suite ($749)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse"}
                            data-plasmic-override={overrides.collapse}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pea3B
                              )}
                            >
                              {
                                "\u2705Very good hardware compatibility\n\u2705Triggering audio and MIDI clips is its main feature, and it is very good at it!\n\u2705Lots of room for expansion with Max for Live and instrument / effect racks.\n\u2705Reasonably easy to navigate and set up\n\u2705 TouchDesigner Integration\n\u274cSurround sound mixing requires third party plugins / Max devices\n\u274cExpensive\n\u274cResource Intensive"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse2
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l6Te
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"BitWig Studio ($199)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse2", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse2",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse2.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse2"}
                            data-plasmic-override={overrides.collapse2}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__szzcO
                              )}
                            >
                              {
                                "\u2705Live performance features similar to live\n\u2705User friendly interface\n\u2705Launchpad & Other MIDI Device Support\n\u2705 TouchDesigner Integration"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse3
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fDrl
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"FL Studio ($199)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse3", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse3",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse3.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse3"}
                            data-plasmic-override={overrides.collapse3}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jBxdb
                              )}
                            >
                              {
                                "\u2705Wide support for MIDI Devices\n\u2705Low latency when used with ASIO driver.\n\u2705User friendly UI\n\u274cNot exactly made for live performances"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse4
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hnb94
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Reaper"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse4", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse4",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse4.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse4"}
                            data-plasmic-override={overrides.collapse4}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__f64XH
                              )}
                            >
                              {
                                "\u2705Free\n\u2705Open Source\n\u2705Multi Channel Audio Support\n\u2705MIDI Support\n\u274cNot really made for live performances\n\u274cNot very intuitive interface"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__apGpo
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Visuals Software"}
                          </span>
                        </React.Fragment>
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse5
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5FDkv
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Max For Live"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse5", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse5",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse5.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse5"}
                            data-plasmic-override={overrides.collapse5}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pWh6L
                              )}
                            >
                              {
                                "\u2705Integrates directly within Ableton for lots of control\n\u2705Ability to create easy to use UIs \n\u2705Lots of community resources\n\u274cNode based setup can get messy and confusing \n\u274cMore complex setups need coding"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse6
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pQLxO
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"TouchDesigner "}
                                </span>
                                <React.Fragment>{""}</React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {" (Free*)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse6", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse6",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse6.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse6"}
                            data-plasmic-override={overrides.collapse6}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__clAWx
                              )}
                            >
                              {
                                "\u2705Integration with Ableton & BitWig\n\u2705Lots of control\n\u2705Much community Support\n\u274cHigh System requirements\n\u274cFree version limited to 720p"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse7
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ddxkG
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Resolume ($300)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse7", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse7",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse7.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse7"}
                            data-plasmic-override={overrides.collapse7}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lRk4T
                              )}
                            >
                              {
                                "\u2705Made specifically for live performed visuals\n\u2705MIDI Triggering Support\n\u2705Allows for multi-projector blending\n\u274cVery expensive"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                  </React.Fragment>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "tabs",
                    "activeKey"
                  ]).apply(null, eventArgs);
                }}
                sticky={false}
                tabBarBackground={"#FFF"}
                tabBarClassName={classNames({
                  [sty["pcls_zLHhchMs9YnY"]]: true
                })}
                tabBarExtraContentLeft={null}
                tabPosition={"left"}
                tabsDropdownClassName={classNames({
                  [sty["pcls_Hw8mEdw_QHIE"]]: true
                })}
                tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
                tabsScopeClassName={sty["tabs__tabs"]}
                type={"line"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8Lz2W
                )}
              >
                {
                  "As a final decision on software and base elements, we decided on the following:\n\n\u25aa Clips and audio effects would be triggered in BitWig Studio via a Launchpad. \n\u25aa FX Knobs could be turned to add effects to the music, like reverb or distortion. Some knobs would also adjust the composition, such as key, mode, and tempo.\n\u25aa Integrated with BitWig, reactive visuals in TouchDesigner would mirror the actions the user takes in triggering and effecting the audio. "
                }
              </div>
            </section>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hyNr0)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"64px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/downChevronPng.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />

            <section
              data-plasmic-name={"conceptPrototyping3"}
              data-plasmic-override={overrides.conceptPrototyping3}
              className={classNames(projectcss.all, sty.conceptPrototyping3)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__w0Hy
                )}
              >
                {"2 - FRAMEWORKS"}
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__jwwhs)}
              >
                <div className={classNames(projectcss.all, sty.column__y9D7S)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vLxZz
                    )}
                  >
                    {
                      "After deciding on our hardware and software, I moved onto setting up the basic frameworks for all the features we needed. This included basic audio setups in BitWig, options for video inputs in TouchDesigner, and write-ups on how to set up each of these key features. I tried to keep things pretty broad so that we would have flexibility when finalizing assets."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__ed8Fv)}>
                  <YouTube
                    className={classNames("__wab_instance", sty.youTube__sN8Te)}
                    videoId={"afVmFh0A62M"}
                  />
                </div>
              </Stack__>
              <AntdTabs
                data-plasmic-name={"tabs2"}
                data-plasmic-override={overrides.tabs2}
                activeKey={generateStateValueProp($state, [
                  "tabs2",
                  "activeKey"
                ])}
                animateTabBar={true}
                animateTabContent={true}
                animated={true}
                centered={true}
                className={classNames("__wab_instance", sty.tabs2)}
                defaultActiveKey={"1"}
                items={
                  <React.Fragment>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__i5OV
                      )}
                      key={"1"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__as5Nj
                          )}
                        >
                          {"Audio Humanization"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zztgx
                        )}
                      >
                        {
                          'While setting up live looping in BitWig, many limitations can prevent the performance from sounding "human," especially in this case where many non-music knowledgeable people will be using the setup. '
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iJgjC
                        )}
                      >
                        {
                          "These limitations include:\n\u25aa Lack of unique sounds\n\u25aa Inability to control pitch / mode\n\u25aa Lack of flexibility in tempo variation\n\u25aa Loops.... loop!"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hJp2
                        )}
                      >
                        {
                          "In order to address these limitations here is what I came up with:"
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse8
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qfRu3
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Prepare for Diversity"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse8", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse8",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse8.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse8"}
                            data-plasmic-override={overrides.collapse8}
                            {...child$Props}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__plDoh)}
                              displayHeight={"90px"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/disuko_website_retro_version/images/image49.png",
                                fullWidth: 514,
                                fullHeight: 304,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oeyHo
                              )}
                            >
                              {
                                "\u25aa As people use the installation, some will want to go fast, some will want to go slow, some will want minimal, some will want complex... etc.\n\u25aa Before even setting up the project, a large variety of sounds is needed. My initial first thoughts were to have many sounds with the same tempo, as a midground, so that users could speed them up or slow them down. However, this resulted in the loops sounding strange on the far ends of the tempo scale. Instead of having a midground, I then switched to the approach of having a large variety of tempos and grooves. Some loops are 4 on the floor at 126 bpm, some are bossa nova at 70, and some are trap beats at 170. \n\ud83d\udcccHaving a wide variety of options of the user to play with rewards creativity and allows for far more unique compositions to come about during use."
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse9
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aUlWh
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Fake Variety"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse9", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse9",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse9.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse9"}
                            data-plasmic-override={overrides.collapse9}
                            {...child$Props}
                          >
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__bBan)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/disuko_website_retro_version/images/image50.png",
                                fullWidth: 1434,
                                fullHeight: 73,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5Hykz
                              )}
                            >
                              {
                                '\u25aa BitWig offers many opportunities to transform what would otherwise be boring 2 bar loops into a unique "idea" that evolves as it plays, and varies in it\'s composition. \n\u25aa By selecting small snippets of audio and specific MIDI notes one can adjust the "chance" of that snippet playing. For example, a chord progression loop may feature a transition chord at the end to lead back around to the beginning. This transition chord\'s chance could be set to 30%, so that it will only play 30% of the time the progression loops. This keeps the same musical idea, but adds in a little bit of extra variety that keeps the song interesting.\n\u25aa This is also very good for percussion sounds. A basic kick on 1/3 and snare on 2/4 loop can be played, but extra drum hits with a small chance to play can add groove and contribute to the live feeling of the drums. \n\ud83d\udccc Loops should be treated more as musical ideas, rather than concrete compositions. '
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse10
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ekiYd
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Organic Effects Controls"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse10", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse10",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse10.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse10"}
                            data-plasmic-override={overrides.collapse10}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vpNri
                              )}
                            >
                              {
                                "\u25aa It is inevitable that users will want to channel their emotions and feelings into performance, although many may not understand what music theory driven decisions will best reflect these feelings. \n\u25aa Therefore, we need to give the option to change key, mode, and tempo in a way that feels natural. "
                              }
                            </div>
                            {(() => {
                              const child$Props = {
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.collapse11
                                ),
                                defaultOpen: true,
                                label2: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__otRip
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 700 }}
                                      >
                                        {"Tempo Knob (Imagination)"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "open",
                                    ["collapse11", "open"],
                                    AntdSingleCollapse_Helpers
                                  ).apply(null, eventArgs);
                                },
                                open: generateStateValueProp($state, [
                                  "collapse11",
                                  "open"
                                ]),
                                showArrow: true
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "collapse11.open"
                                  }
                                ],
                                [],
                                AntdSingleCollapse_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdSingleCollapse
                                  data-plasmic-name={"collapse11"}
                                  data-plasmic-override={overrides.collapse11}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ovLnG
                                    )}
                                  >
                                    {
                                      "\u25aa The lower the knob is, the slower the song goes. The higher the knob is, the faster the song goes.\n\u25aa Should be restricted to reasonable tempos, but reach slightly into each extreme if the user wants their song to be REALLY fast or slow."
                                    }
                                  </div>
                                </AntdSingleCollapse>
                              );
                            })()}
                            {(() => {
                              const child$Props = {
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.collapse12
                                ),
                                defaultOpen: true,
                                label2: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__q16D
                                    )}
                                  >
                                    <React.Fragment>
                                      <span
                                        className={
                                          "plasmic_default__all plasmic_default__span"
                                        }
                                        style={{ fontWeight: 700 }}
                                      >
                                        {"Mode Knob (Identity)"}
                                      </span>
                                    </React.Fragment>
                                  </div>
                                ),
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "open",
                                    ["collapse12", "open"],
                                    AntdSingleCollapse_Helpers
                                  ).apply(null, eventArgs);
                                },
                                open: generateStateValueProp($state, [
                                  "collapse12",
                                  "open"
                                ]),
                                showArrow: true
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "open",
                                    plasmicStateName: "collapse12.open"
                                  }
                                ],
                                [],
                                AntdSingleCollapse_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdSingleCollapse
                                  data-plasmic-name={"collapse12"}
                                  data-plasmic-override={overrides.collapse12}
                                  {...child$Props}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qBYat
                                    )}
                                  >
                                    {
                                      ' \u25aa This one is a little weird.\n\u25aa Since musical modes are more based on feeling than direct up-or-down modulation, this control is most abstracted.\n\u25aa It uses BitWig\'s Key Filter device.\n\u25aa Moving the knob will allow the user to scroll through modes. Most simply, major and minor will be the easiest to understand for non music people; but the ability to choose uncommon modes will allow for more opportunities for expression, as well as boost the themes of non-western instrumentation in the music.\n\u25aa Incoming MIDI clips will be "snapped" to the chosen mode. For example, a clip written in E minor may contain a G. This G will be snapped to a G# if the mode knob is set to major.\n\u2753One issue I encountered in this approach is the use of pre-rendered audio loops. While they can be pitched up and down fairly easily, mapping the individual notes within the loops is difficult. \n\u25aa To get around this limitation, I used the VST Plugin "Pitchmap." It splits up an audio clip  into all its individual frequency bands, and then shifts these individual bands to an incoming MIDI clip. \n\u25aa The incoming MIDI clip makes no audio sound, but sends its note data to each Pitchmap Instance. This note data shifted around by the Key Filter, so all audio tracks affected by the Pitchmap have their frequencies snapped to the desired key.'
                                    }
                                  </div>
                                </AntdSingleCollapse>
                              );
                            })()}
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__oWAl
                      )}
                      key={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yKf8J
                          )}
                        >
                          {"Organic Composition"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oYgs5
                        )}
                      >
                        {
                          "\u25aa It is inevitable that users will want to channel their emotions and feelings into performance, although many may not understand what music theory driven decisions will best reflect these feelings. \n\u25aa Therefore, we need to give the option to change key, mode, and tempo in a way that feels natural. "
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse16
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Qt6O
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Tempo Knob (Imagination)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse16", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse16",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse16.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse16"}
                            data-plasmic-override={overrides.collapse16}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bgItC
                              )}
                            >
                              {
                                "\u25aa The lower the knob is, the slower the song goes. The higher the knob is, the faster the song goes.\n\u25aa Should be restricted to reasonable tempos, but reach slightly into each extreme if the user wants their song to be REALLY fast or slow."
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse17
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zexmk
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Mode Knob (Identity)"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse17", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse17",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse17.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse17"}
                            data-plasmic-override={overrides.collapse17}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e2Jr5
                              )}
                            >
                              {
                                ' \u25aa This one is a little weird.\n\u25aa Since musical modes are more based on feeling than direct up-or-down modulation, this control is most abstracted.\n\u25aa It uses BitWig\'s Key Filter device.\n\u25aa Moving the knob will allow the user to scroll through modes. Most simply, major and minor will be the easiest to understand for non music people; but the ability to choose uncommon modes will allow for more opportunities for expression, as well as boost the themes of non-western instrumentation in the music.\n\u25aa Incoming MIDI clips will be "snapped" to the chosen mode. For example, a clip written in E minor may contain a G. This G will be snapped to a G# if the mode knob is set to major.\n\u2753One issue I encountered in this approach is the use of pre-rendered audio loops. While they can be pitched up and down fairly easily, mapping the individual notes within the loops is difficult. \n\u25aa To get around this limitation, I used the VST Plugin "Pitchmap." It splits up an audio clip  into all its individual frequency bands, and then shifts these individual bands to an incoming MIDI clip. \n\u25aa The incoming MIDI clip makes no audio sound, but sends its note data to each Pitchmap Instance. This note data shifted around by the Key Filter, so all audio tracks affected by the Pitchmap have their frequencies snapped to the desired key.'
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__sos2Y
                      )}
                      key={"3"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l2XQ3
                          )}
                        >
                          {"Video Stylization"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xtA2B
                        )}
                      >
                        {
                          "With the decision to use recorded video assets in the visualizations, there's a few methods we can use to stylize them."
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse18
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aZxG5
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Speed and Cue Points"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse18", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse18",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse18.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse18"}
                            data-plasmic-override={overrides.collapse18}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__x0UO4
                              )}
                            >
                              {
                                "\u25aa The MovieFileIn TOP can take in a video and play it at any speed. Speed could be linked to any BitWig effect.\n\u25aa There is also a cue point set up where a cue point can be set anywhere within the video. Then, a the cue point can be pulsed to play the video from this point. This could be used to loop video to the beat of the music."
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse19
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xokB
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Blending Modes"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse19", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse19",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse19.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse19"}
                            data-plasmic-override={overrides.collapse19}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ty7Mf
                              )}
                            >
                              {
                                "\u25aa We can use blending modes such as Screen, Overlay, and more to composite video clips on top of the visualizations."
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse20
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6NbAq
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Filter Effects"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse20", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse20",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse20.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse20"}
                            data-plasmic-override={overrides.collapse20}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xeypQ
                              )}
                            >
                              {
                                "\u25aaTouchDesigner has an assortment of filter effects that can be put on visuals after any initial processing. These could be linked to BitWig audio envelopes to have them react to the audio."
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                  </React.Fragment>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "tabs2",
                    "activeKey"
                  ]).apply(null, eventArgs);
                }}
                sticky={false}
                tabBarBackground={"#FFF"}
                tabBarClassName={classNames({
                  [sty["pcls_Tk0XH9Pd_-tA"]]: true
                })}
                tabBarExtraContentLeft={null}
                tabPosition={"left"}
                tabsDropdownClassName={classNames({
                  [sty["pcls_Uy3TRt31BZur"]]: true
                })}
                tabsDropdownScopeClassName={sty["tabs2__tabsDropdown"]}
                tabsScopeClassName={sty["tabs2__tabs"]}
              />
            </section>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__zZoMx)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"64px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/downChevronPng.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />

            <section
              data-plasmic-name={"conceptPrototyping4"}
              data-plasmic-override={overrides.conceptPrototyping4}
              className={classNames(projectcss.all, sty.conceptPrototyping4)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__lei7O
                )}
              >
                {"3 - ITERATION"}
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns___1Rb2E)}
              >
                <div className={classNames(projectcss.all, sty.column__rCgsf)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nIfPy
                    )}
                  >
                    {
                      "After getting further down the planning pipeline, we began to finalize many components of the installation. We also held feedback meetings with colleagues to discuss possibilities for the installation, and to get a fresh set of eyes/ears on the content. Most of this phase was discussing ideas, implementing them, and iterating on them based on feedback. "
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___9FU1M)}>
                  <YouTube
                    className={classNames("__wab_instance", sty.youTube__sL1YF)}
                    videoId={"afVmFh0A62M"}
                  />
                </div>
              </Stack__>
              <AntdTabs
                data-plasmic-name={"tabs3"}
                data-plasmic-override={overrides.tabs3}
                activeKey={generateStateValueProp($state, [
                  "tabs3",
                  "activeKey"
                ])}
                animateTabBar={true}
                animateTabContent={true}
                animated={true}
                centered={true}
                className={classNames("__wab_instance", sty.tabs3)}
                defaultActiveKey={"1"}
                items={
                  <React.Fragment>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__sW7HC
                      )}
                      disabled={false}
                      key={"1"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___84RAe
                          )}
                        >
                          {"Song Bases"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aeRgw
                        )}
                      >
                        {
                          "While thinking of how to keep the installation accessible to non-musician users, we decided that the majority of the sounds would be pre-rendered clips organized in groups that all work well together. These Song Bases would use samples and drum patterns sourced by Yusuf. Each Base would have a specific theme centered around different regions' musical styles, which the user could then mix and match into their own compositions."
                        }
                      </div>
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__xxga7
                      )}
                      disabled={false}
                      key={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xXasc
                          )}
                        >
                          {"FX Knobs"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__umEsj
                        )}
                      >
                        {
                          'A fun idea we had while discussing what the knobs would do was abstracting them away from specific audio/video effects like "Reverb" or "Sharpen" and more towards general concepts. This helps keep the use of the effects accessible to non musician users, as well as creating a broader scope of expression.'
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bxK3D
                        )}
                      >
                        {
                          "We used the five mission words that MIPSTERZ stands by in their work:"
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse21
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vWpyw
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Imagination"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse21", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse21",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse21.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse21"}
                            data-plasmic-override={overrides.collapse21}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Kfcj
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontStyle: "italic" }}
                                >
                                  {
                                    "Freedom, Expressiveness, Boundless. Freeform"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ndRsx
                              )}
                            >
                              {
                                "\ud83c\udfa7Song Tempo\n\ud83d\udcf7 Color of Video Clips\n\ud83d\udcf7Color of Particles"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse22
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hpfB
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Community"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse22", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse22",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse22.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse22"}
                            data-plasmic-override={overrides.collapse22}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__a21A7
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontStyle: "italic" }}
                                >
                                  {
                                    "Many, Togetherness, Interlocking, Connection"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__iAqoQ
                              )}
                            >
                              {
                                "\ud83c\udfa7Reverb\n\ud83c\udfa7Echo \n\ud83c\udfa7Frequency Filter on extremes\n\ud83d\udcf7 Video Feedback"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse23
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__r2C1I
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Identity"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse23", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse23",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse23.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse23"}
                            data-plasmic-override={overrides.collapse23}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__soSa
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontStyle: "italic" }}
                                >
                                  {"Variety, Spectrum, Relatability, Distinct "}
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__z5Du
                              )}
                            >
                              {
                                "\ud83c\udfa7Volume Beat Pump\n\ud83c\udfa7Key/Mode Selection\n\ud83d\udcf7Video Clip Brightness Beat Pump"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse24
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yEOh5
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Resistance"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse24", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse24",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse24.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse24"}
                            data-plasmic-override={overrides.collapse24}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bL7Al
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontStyle: "italic" }}
                                >
                                  {
                                    "Sharp, Jagged, Angular, Rough, Gritty, Bold, Strong"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__v4Fsz
                              )}
                            >
                              {
                                "\ud83c\udfa7Distortion\n\ud83c\udfa7Bitcrusher/8Bit on Second Half\n\ud83c\udfa7Beat Repeat/Glitch on Second Half\n\ud83d\udcf7Pixelate\n\ud83d\udcf7Sharpen"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse25
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jHu05
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Liberation"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse25", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse25",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse25.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse25"}
                            data-plasmic-override={overrides.collapse25}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xz4Dz
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontStyle: "italic" }}
                                >
                                  {
                                    "Wavy, Futuristic, Unbound, Progressive, Fluid"
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mifOq
                              )}
                            >
                              {
                                "\ud83c\udfa7Hyper Chorus\n\ud83c\udfa7Echo\n\ud83c\udfa7Beat Repeat Pattern Selector\n\ud83d\udcf7Wavy Displacement"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__xifMc
                      )}
                      disabled={false}
                      key={"3"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7DZs7
                          )}
                        >
                          {"Projection Layout"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4CrCl
                        )}
                      >
                        {
                          "The layout of the projectors still wasn't entirely figured out yet, but we knew we wanted a main project on the wall, and a secondary projection down on the table the hardware is on or on the floor."
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse26
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__akWnU
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Particles"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse26", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse26",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse26.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse26"}
                            data-plasmic-override={overrides.collapse26}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gfaV4
                              )}
                            >
                              {
                                '\u25aa A large simulated mass of particles that "dances" to the music.\n\u25aa The amount of particles is based on how many loops are playing.'
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse27
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nEIa
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Video Underlay"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse27", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse27",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse27.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse27"}
                            data-plasmic-override={overrides.collapse27}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zoxc
                              )}
                            >
                              {
                                "\u25aa Neon Edge-styled video clips relating to MIPSTERZ\n\u25aa Speed up and slow down based on the music. \n\u25aa Different audio loops swap out what video clip is showing.\n"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse28
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hg0Ut
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Pattern Overlay"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse28", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse28",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse28.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse28"}
                            data-plasmic-override={overrides.collapse28}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d4KcA
                              )}
                            >
                              {
                                "\u25aa Geometric Pattern overlays inspired by the Alhambra. \n\u25aa Moves based on the music.\n\u25aa Works as a frame for either the wall projection or the table containing the hardware.\n"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                    </AntdTabItem>
                  </React.Fragment>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "tabs3",
                    "activeKey"
                  ]).apply(null, eventArgs);
                }}
                sticky={false}
                tabBarBackground={"#FFF"}
                tabBarClassName={classNames({
                  [sty["pcls_tnaWKOEmDtSN"]]: true
                })}
                tabBarExtraContentLeft={null}
                tabPosition={"left"}
                tabsDropdownClassName={classNames({
                  [sty["pcls_Wn5wgz9xYRVl"]]: true
                })}
                tabsDropdownScopeClassName={sty["tabs3__tabsDropdown"]}
                tabsScopeClassName={sty["tabs3__tabs"]}
              />
            </section>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__qlz7C)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"64px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/downChevronPng.png",
                fullWidth: 512,
                fullHeight: 512,
                aspectRatio: undefined
              }}
            />

            <section
              data-plasmic-name={"conceptPrototyping5"}
              data-plasmic-override={overrides.conceptPrototyping5}
              className={classNames(projectcss.all, sty.conceptPrototyping5)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__ohspc
                )}
              >
                {"4 - FINAL DEVELOPMENT"}
              </h1>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__noiHi)}
              >
                <div className={classNames(projectcss.all, sty.column__eymcb)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s2MUi
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "After figuring out most of the features on a conceptual and software-oriented front, the final configuration of "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"how "}
                      </span>
                      <React.Fragment>
                        {
                          " to exactly bring everything together into the real world began. This included final asset collection, sourcing computer hardware, thinking about user experience with the audio devices (also making a custom audio device!), and deciding where all of the visual elements would go in the final space."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__w2RVd)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___9WucU)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/image51.jpg",
                      fullWidth: 4032,
                      fullHeight: 3024,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
              <AntdTabs
                data-plasmic-name={"tabs4"}
                data-plasmic-override={overrides.tabs4}
                activeKey={generateStateValueProp($state, [
                  "tabs4",
                  "activeKey"
                ])}
                animateTabBar={true}
                animateTabContent={true}
                animated={true}
                centered={true}
                className={classNames("__wab_instance", sty.tabs4)}
                defaultActiveKey={"1"}
                items={
                  <React.Fragment>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__ffUp
                      )}
                      disabled={false}
                      key={"1"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yCl9
                          )}
                        >
                          {"Main Table"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tecOt
                        )}
                      >
                        {
                          "The main table of the installation is where the user interacts with it. It houses all of the control surfaces that affect the audio and visuals."
                        }
                      </div>
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse31
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c4ZoZ
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Launchpad"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse31", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse31",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse31.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse31"}
                            data-plasmic-override={overrides.collapse31}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kgg4P
                              )}
                            >
                              {
                                "\u25aa 64x64 Button Grid with lights\n\u25aa 6 Song Base Rows\n\u25aa 8 Audio Tracks\n\u25aa Custom designed laser cut cover hides everything except the basic buttons.\n\n"
                              }
                            </div>
                          </AntdSingleCollapse>
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.collapse30
                          ),
                          defaultOpen: false,
                          label2: (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dDz8X
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {"Custom Knob Controller"}
                                </span>
                              </React.Fragment>
                            </div>
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "open",
                              ["collapse30", "open"],
                              AntdSingleCollapse_Helpers
                            ).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "collapse30",
                            "open"
                          ]),
                          showArrow: true
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "collapse30.open"
                            }
                          ],
                          [],
                          AntdSingleCollapse_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdSingleCollapse
                            data-plasmic-name={"collapse30"}
                            data-plasmic-override={overrides.collapse30}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qWc2O
                              )}
                            >
                              {
                                "\u25aa 5 Effects Knobs\n\u25aa Simplsitic design\n\u25aa Each physical knob uses themes from the conceptual effects they control.\n\u25aa Laser cut housing with 3D printed buttons\n"
                              }
                            </div>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___7IZcx)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/disuko_website_retro_version/images/image54.png",
                                fullWidth: 3024,
                                fullHeight: 4032,
                                aspectRatio: undefined
                              }}
                            />
                          </AntdSingleCollapse>
                        );
                      })()}
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__b7L0)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/image52.png",
                          fullWidth: 4032,
                          fullHeight: 3024,
                          aspectRatio: undefined
                        }}
                      />
                    </AntdTabItem>
                    <AntdTabItem
                      className={classNames(
                        "__wab_instance",
                        sty.tabItem__uGDsb
                      )}
                      disabled={false}
                      key={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ssNeh
                          )}
                        >
                          {"Wall Projection"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__edoBu
                        )}
                      >
                        {
                          "Projections on the wall react to the music the user creates. Different post-processing effects are applied to the projection based on the position of the knobs."
                        }
                      </div>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ir17F)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/image53.png",
                          fullWidth: 4032,
                          fullHeight: 3024,
                          aspectRatio: undefined
                        }}
                      />
                    </AntdTabItem>
                  </React.Fragment>
                }
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "tabs4",
                    "activeKey"
                  ]).apply(null, eventArgs);
                }}
                sticky={false}
                tabBarBackground={"#FFF"}
                tabBarClassName={classNames({
                  [sty["pcls_-Ho2vBGSIwjx"]]: true
                })}
                tabBarExtraContentLeft={null}
                tabPosition={"left"}
                tabsDropdownClassName={classNames({
                  [sty["pcls_q46z6VzfKBFi"]]: true
                })}
                tabsDropdownScopeClassName={sty["tabs4__tabsDropdown"]}
                tabsScopeClassName={sty["tabs4__tabs"]}
              />
            </section>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ngGXj)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"256px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/disuko_website_retro_version/images/mipsterZlogoPng.png",
                fullWidth: 1582,
                fullHeight: 392,
                aspectRatio: undefined
              }}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "header",
    "h2",
    "conceptPrototyping2",
    "tabs",
    "collapse",
    "collapse2",
    "collapse3",
    "collapse4",
    "collapse5",
    "collapse6",
    "collapse7",
    "conceptPrototyping3",
    "tabs2",
    "collapse8",
    "collapse9",
    "collapse10",
    "collapse11",
    "collapse12",
    "collapse16",
    "collapse17",
    "collapse18",
    "collapse19",
    "collapse20",
    "conceptPrototyping4",
    "tabs3",
    "collapse21",
    "collapse22",
    "collapse23",
    "collapse24",
    "collapse25",
    "collapse26",
    "collapse27",
    "collapse28",
    "conceptPrototyping5",
    "tabs4",
    "collapse31",
    "collapse30",
    "footer"
  ],
  navbar: ["navbar"],
  header: ["header", "h2"],
  h2: ["h2"],
  conceptPrototyping2: [
    "conceptPrototyping2",
    "tabs",
    "collapse",
    "collapse2",
    "collapse3",
    "collapse4",
    "collapse5",
    "collapse6",
    "collapse7"
  ],
  tabs: [
    "tabs",
    "collapse",
    "collapse2",
    "collapse3",
    "collapse4",
    "collapse5",
    "collapse6",
    "collapse7"
  ],
  collapse: ["collapse"],
  collapse2: ["collapse2"],
  collapse3: ["collapse3"],
  collapse4: ["collapse4"],
  collapse5: ["collapse5"],
  collapse6: ["collapse6"],
  collapse7: ["collapse7"],
  conceptPrototyping3: [
    "conceptPrototyping3",
    "tabs2",
    "collapse8",
    "collapse9",
    "collapse10",
    "collapse11",
    "collapse12",
    "collapse16",
    "collapse17",
    "collapse18",
    "collapse19",
    "collapse20"
  ],
  tabs2: [
    "tabs2",
    "collapse8",
    "collapse9",
    "collapse10",
    "collapse11",
    "collapse12",
    "collapse16",
    "collapse17",
    "collapse18",
    "collapse19",
    "collapse20"
  ],
  collapse8: ["collapse8"],
  collapse9: ["collapse9"],
  collapse10: ["collapse10", "collapse11", "collapse12"],
  collapse11: ["collapse11"],
  collapse12: ["collapse12"],
  collapse16: ["collapse16"],
  collapse17: ["collapse17"],
  collapse18: ["collapse18"],
  collapse19: ["collapse19"],
  collapse20: ["collapse20"],
  conceptPrototyping4: [
    "conceptPrototyping4",
    "tabs3",
    "collapse21",
    "collapse22",
    "collapse23",
    "collapse24",
    "collapse25",
    "collapse26",
    "collapse27",
    "collapse28"
  ],
  tabs3: [
    "tabs3",
    "collapse21",
    "collapse22",
    "collapse23",
    "collapse24",
    "collapse25",
    "collapse26",
    "collapse27",
    "collapse28"
  ],
  collapse21: ["collapse21"],
  collapse22: ["collapse22"],
  collapse23: ["collapse23"],
  collapse24: ["collapse24"],
  collapse25: ["collapse25"],
  collapse26: ["collapse26"],
  collapse27: ["collapse27"],
  collapse28: ["collapse28"],
  conceptPrototyping5: [
    "conceptPrototyping5",
    "tabs4",
    "collapse31",
    "collapse30"
  ],
  tabs4: ["tabs4", "collapse31", "collapse30"],
  collapse31: ["collapse31"],
  collapse30: ["collapse30"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  header: "section";
  h2: "h2";
  conceptPrototyping2: "section";
  tabs: typeof AntdTabs;
  collapse: typeof AntdSingleCollapse;
  collapse2: typeof AntdSingleCollapse;
  collapse3: typeof AntdSingleCollapse;
  collapse4: typeof AntdSingleCollapse;
  collapse5: typeof AntdSingleCollapse;
  collapse6: typeof AntdSingleCollapse;
  collapse7: typeof AntdSingleCollapse;
  conceptPrototyping3: "section";
  tabs2: typeof AntdTabs;
  collapse8: typeof AntdSingleCollapse;
  collapse9: typeof AntdSingleCollapse;
  collapse10: typeof AntdSingleCollapse;
  collapse11: typeof AntdSingleCollapse;
  collapse12: typeof AntdSingleCollapse;
  collapse16: typeof AntdSingleCollapse;
  collapse17: typeof AntdSingleCollapse;
  collapse18: typeof AntdSingleCollapse;
  collapse19: typeof AntdSingleCollapse;
  collapse20: typeof AntdSingleCollapse;
  conceptPrototyping4: "section";
  tabs3: typeof AntdTabs;
  collapse21: typeof AntdSingleCollapse;
  collapse22: typeof AntdSingleCollapse;
  collapse23: typeof AntdSingleCollapse;
  collapse24: typeof AntdSingleCollapse;
  collapse25: typeof AntdSingleCollapse;
  collapse26: typeof AntdSingleCollapse;
  collapse27: typeof AntdSingleCollapse;
  collapse28: typeof AntdSingleCollapse;
  conceptPrototyping5: "section";
  tabs4: typeof AntdTabs;
  collapse31: typeof AntdSingleCollapse;
  collapse30: typeof AntdSingleCollapse;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewMaqamCity__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewMaqamCity__VariantsArgs;
    args?: PlasmicNewMaqamCity__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewMaqamCity__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewMaqamCity__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewMaqamCity__ArgProps,
          internalVariantPropNames: PlasmicNewMaqamCity__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewMaqamCity__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewMaqamCity";
  } else {
    func.displayName = `PlasmicNewMaqamCity.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewMaqamCity = Object.assign(
  // Top-level PlasmicNewMaqamCity renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    header: makeNodeComponent("header"),
    h2: makeNodeComponent("h2"),
    conceptPrototyping2: makeNodeComponent("conceptPrototyping2"),
    tabs: makeNodeComponent("tabs"),
    collapse: makeNodeComponent("collapse"),
    collapse2: makeNodeComponent("collapse2"),
    collapse3: makeNodeComponent("collapse3"),
    collapse4: makeNodeComponent("collapse4"),
    collapse5: makeNodeComponent("collapse5"),
    collapse6: makeNodeComponent("collapse6"),
    collapse7: makeNodeComponent("collapse7"),
    conceptPrototyping3: makeNodeComponent("conceptPrototyping3"),
    tabs2: makeNodeComponent("tabs2"),
    collapse8: makeNodeComponent("collapse8"),
    collapse9: makeNodeComponent("collapse9"),
    collapse10: makeNodeComponent("collapse10"),
    collapse11: makeNodeComponent("collapse11"),
    collapse12: makeNodeComponent("collapse12"),
    collapse16: makeNodeComponent("collapse16"),
    collapse17: makeNodeComponent("collapse17"),
    collapse18: makeNodeComponent("collapse18"),
    collapse19: makeNodeComponent("collapse19"),
    collapse20: makeNodeComponent("collapse20"),
    conceptPrototyping4: makeNodeComponent("conceptPrototyping4"),
    tabs3: makeNodeComponent("tabs3"),
    collapse21: makeNodeComponent("collapse21"),
    collapse22: makeNodeComponent("collapse22"),
    collapse23: makeNodeComponent("collapse23"),
    collapse24: makeNodeComponent("collapse24"),
    collapse25: makeNodeComponent("collapse25"),
    collapse26: makeNodeComponent("collapse26"),
    collapse27: makeNodeComponent("collapse27"),
    collapse28: makeNodeComponent("collapse28"),
    conceptPrototyping5: makeNodeComponent("conceptPrototyping5"),
    tabs4: makeNodeComponent("tabs4"),
    collapse31: makeNodeComponent("collapse31"),
    collapse30: makeNodeComponent("collapse30"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicNewMaqamCity
    internalVariantProps: PlasmicNewMaqamCity__VariantProps,
    internalArgProps: PlasmicNewMaqamCity__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "New Maqam City🌸",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/newmaqamcity"
    }
  }
);

export default PlasmicNewMaqamCity;
/* prettier-ignore-end */
