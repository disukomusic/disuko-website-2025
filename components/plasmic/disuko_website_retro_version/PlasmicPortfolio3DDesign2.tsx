// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: KO_342KPQy8g

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicPortfolio3DDesign2.module.css"; // plasmic-import: KO_342KPQy8g/css

createPlasmicElementProxy;

export type PlasmicPortfolio3DDesign2__VariantMembers = {};
export type PlasmicPortfolio3DDesign2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPortfolio3DDesign2__VariantsArgs;
export const PlasmicPortfolio3DDesign2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPortfolio3DDesign2__ArgsType = {};
type ArgPropType = keyof PlasmicPortfolio3DDesign2__ArgsType;
export const PlasmicPortfolio3DDesign2__ArgProps = new Array<ArgPropType>();

export type PlasmicPortfolio3DDesign2__OverridesType = {
  _3DDesign?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  windowButton?: Flex__<typeof WindowButton>;
  imageWindow19?: Flex__<"div">;
  imageWindow20?: Flex__<"div">;
  imageWindow21?: Flex__<"div">;
  imageWindow16?: Flex__<"div">;
  imageWindow17?: Flex__<"div">;
  imageWindow18?: Flex__<"div">;
  imageWindow22?: Flex__<"div">;
  imageWindow4?: Flex__<"div">;
  imageWindow5?: Flex__<"div">;
  imageWindow10?: Flex__<"div">;
  imageWindow6?: Flex__<"div">;
  imageWindow7?: Flex__<"div">;
  imageWindow11?: Flex__<"div">;
  imageWindow8?: Flex__<"div">;
  imageWindow9?: Flex__<"div">;
  imageWindow12?: Flex__<"div">;
  imageWindow13?: Flex__<"div">;
  imageWindow14?: Flex__<"div">;
  imageWindow15?: Flex__<"div">;
  imageWindow?: Flex__<"div">;
  imageWindow2?: Flex__<"div">;
  imageWindow3?: Flex__<"div">;
  cad2?: Flex__<typeof SliderWrapper>;
  cad?: Flex__<typeof SliderWrapper>;
};

export interface DefaultPortfolio3DDesign2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPortfolio3DDesign2__RenderFunc(props: {
  variants: PlasmicPortfolio3DDesign2__VariantsArgs;
  args: PlasmicPortfolio3DDesign2__ArgsType;
  overrides: PlasmicPortfolio3DDesign2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "cad.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "cad",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      },
      {
        path: "cad2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "cad2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">
          {PlasmicPortfolio3DDesign2.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPortfolio3DDesign2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPortfolio3DDesign2.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicPortfolio3DDesign2.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicPortfolio3DDesign2.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicPortfolio3DDesign2.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicPortfolio3DDesign2.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicPortfolio3DDesign2.pageMetadata.ogImageSrc}
        />
        <link
          rel="canonical"
          href={PlasmicPortfolio3DDesign2.pageMetadata.canonical}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"_3DDesign"}
        data-plasmic-override={overrides._3DDesign}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty._3DDesign,
          {
            [projectcss.global_theme_classic]: hasVariant(
              globalVariants,
              "theme",
              "classic"
            ),
            [sty._3DDesignglobal_theme_classic]: hasVariant(
              globalVariants,
              "theme",
              "classic"
            )
          }
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <WindowButton
          data-plasmic-name={"windowButton"}
          data-plasmic-override={overrides.windowButton}
          className={classNames("__wab_instance", sty.windowButton)}
          link={`/portfolio`}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jwSt9
            )}
          >
            {"<- Back To Portfolio"}
          </div>
        </WindowButton>
        <div className={classNames(projectcss.all, sty.freeBox___42OG7)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__zLm1S)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "155px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/disuko_website_retro_version/images/_3DdesignPng.png",
              fullWidth: 1467,
              fullHeight: 566,
              aspectRatio: undefined
            }}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__poFps)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lSkc,
              {
                [sty.textglobal_theme_classic__lSkcENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"Characters"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5X35X,
              {
                [sty.textglobal_theme_classic___5X35XeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {
              '"Disuko Avatar" - Digital Self Portrait and VRChat Community Labs '
            }
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__syAVp)}
          >
            <div
              data-plasmic-name={"imageWindow19"}
              data-plasmic-override={overrides.imageWindow19}
              className={classNames(projectcss.all, sty.imageWindow19, {
                [sty.imageWindow19global_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__eK2Jm, {
                  [sty.imgglobal_theme_classic__eK2JmeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/characterIconPng.png",
                  fullWidth: 1024,
                  fullHeight: 1024,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"imageWindow20"}
              data-plasmic-override={overrides.imageWindow20}
              className={classNames(projectcss.all, sty.imageWindow20, {
                [sty.imageWindow20global_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__yzI9M, {
                  [sty.imgglobal_theme_classic__yzI9MeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/image94.png",
                  fullWidth: 533,
                  fullHeight: 607,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"imageWindow21"}
              data-plasmic-override={overrides.imageWindow21}
              className={classNames(projectcss.all, sty.imageWindow21, {
                [sty.imageWindow21global_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ugTQa, {
                  [sty.imgglobal_theme_classic__ugTQaeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/image67.gif",
                  fullWidth: 600,
                  fullHeight: 338,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vkVrJ,
              {
                [sty.textglobal_theme_classic__vkVrJeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{'"N3ko Band" - '}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__kD20
                  )}
                  component={Link}
                  href={"https://on3ko.lol"}
                  platform={"nextjs"}
                >
                  {"On3ko Webcomic"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__eIrmz)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__l3Wq5)}>
              <div
                data-plasmic-name={"imageWindow16"}
                data-plasmic-override={overrides.imageWindow16}
                className={classNames(projectcss.all, sty.imageWindow16, {
                  [sty.imageWindow16global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___2F4Q0, {
                    [sty.imgglobal_theme_classic___2F4Q0ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image68.gif",
                    fullWidth: 256,
                    fullHeight: 256,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gc1KU,
                  {
                    [sty.textglobal_theme_classic__gc1KUeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"On3ko"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__m25U)}>
              <div
                data-plasmic-name={"imageWindow17"}
                data-plasmic-override={overrides.imageWindow17}
                className={classNames(projectcss.all, sty.imageWindow17, {
                  [sty.imageWindow17global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yYtK3, {
                    [sty.imgglobal_theme_classic__yYtK3ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/emon3Ko0031Png.png",
                    fullWidth: 256,
                    fullHeight: 256,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aVel8,
                  {
                    [sty.textglobal_theme_classic__aVel8ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"Emon3ko"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zoKkA)}>
              <div
                data-plasmic-name={"imageWindow18"}
                data-plasmic-override={overrides.imageWindow18}
                className={classNames(projectcss.all, sty.imageWindow18, {
                  [sty.imageWindow18global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qh4KB, {
                    [sty.imgglobal_theme_classic__qh4KBeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image95.png",
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nZiDd,
                  {
                    [sty.textglobal_theme_classic__nZiDdeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"Edgen3ko"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kEbvM)}>
              <div
                data-plasmic-name={"imageWindow22"}
                data-plasmic-override={overrides.imageWindow22}
                className={classNames(projectcss.all, sty.imageWindow22, {
                  [sty.imageWindow22global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__g7Uf9, {
                    [sty.imgglobal_theme_classic__g7Uf9ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image97.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zhzBy,
                  {
                    [sty.textglobal_theme_classic__zhzBYeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"Shyn3ko"}
              </div>
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__e6S1M,
              {
                [sty.textglobal_theme_classic__e6S1MeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{'"Diko" - '}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__sHaq
                  )}
                  component={Link}
                  href={"https://redpandastudios.net"}
                  platform={"nextjs"}
                >
                  {"PANDAMONIUM: Diko Dating Sim (Red Panda Studios)"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__kcFao)}
          >
            <div className={classNames(projectcss.all, sty.column__mrpRg)}>
              <div
                data-plasmic-name={"imageWindow4"}
                data-plasmic-override={overrides.imageWindow4}
                className={classNames(projectcss.all, sty.imageWindow4, {
                  [sty.imageWindow4global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vyA5Q, {
                    [sty.imgglobal_theme_classic__vyA5QeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image79.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__qeeGs)}>
              <div
                data-plasmic-name={"imageWindow5"}
                data-plasmic-override={overrides.imageWindow5}
                className={classNames(projectcss.all, sty.imageWindow5, {
                  [sty.imageWindow5global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__tcLdb, {
                    [sty.imgglobal_theme_classic__tcLdbeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image84.png",
                    fullWidth: 553,
                    fullHeight: 550,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__q8KuJ)}>
              <div
                data-plasmic-name={"imageWindow10"}
                data-plasmic-override={overrides.imageWindow10}
                className={classNames(projectcss.all, sty.imageWindow10, {
                  [sty.imageWindow10global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vRbzf, {
                    [sty.imgglobal_theme_classic__vRbzfeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image87.png",
                    fullWidth: 1919,
                    fullHeight: 1044,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wLf3,
              {
                [sty.textglobal_theme_classic__wLf3ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{'"Shiku" - '}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__kdb7X
                  )}
                  component={Link}
                  href={"https://redpandastudios.net"}
                  platform={"nextjs"}
                >
                  {"PANDAMONIUM: Diko Dating Sim (Red Panda Studios)"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__hxwKl)}
          >
            <div className={classNames(projectcss.all, sty.column__liquZ)}>
              <div
                data-plasmic-name={"imageWindow6"}
                data-plasmic-override={overrides.imageWindow6}
                className={classNames(projectcss.all, sty.imageWindow6, {
                  [sty.imageWindow6global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__kRdz5, {
                    [sty.imgglobal_theme_classic__kRdz5ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image82.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__iUnmF)}>
              <div
                data-plasmic-name={"imageWindow7"}
                data-plasmic-override={overrides.imageWindow7}
                className={classNames(projectcss.all, sty.imageWindow7, {
                  [sty.imageWindow7global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__odoJl, {
                    [sty.imgglobal_theme_classic__odoJleNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image83.png",
                    fullWidth: 553,
                    fullHeight: 550,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__uLx3)}>
              <div
                data-plasmic-name={"imageWindow11"}
                data-plasmic-override={overrides.imageWindow11}
                className={classNames(projectcss.all, sty.imageWindow11, {
                  [sty.imageWindow11global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__jXuru, {
                    [sty.imgglobal_theme_classic__jXurueNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image88.png",
                    fullWidth: 1919,
                    fullHeight: 1046,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yJIh9,
              {
                [sty.textglobal_theme_classic__yJIh9ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {'"Customizable Racoon Player" - '}
              </React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link___1OSx
                  )}
                  component={Link}
                  href={"https://redpandastudios.net"}
                  platform={"nextjs"}
                >
                  {"PANDAMONIUM: Diko Dating Sim (Red Panda Studios)"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__qfWuo)}
          >
            <div className={classNames(projectcss.all, sty.column__apbCn)}>
              <div
                data-plasmic-name={"imageWindow8"}
                data-plasmic-override={overrides.imageWindow8}
                className={classNames(projectcss.all, sty.imageWindow8, {
                  [sty.imageWindow8global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__orkRx, {
                    [sty.imgglobal_theme_classic__orkRXeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image85.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column___4Mtln)}>
              <div
                data-plasmic-name={"imageWindow9"}
                data-plasmic-override={overrides.imageWindow9}
                className={classNames(projectcss.all, sty.imageWindow9, {
                  [sty.imageWindow9global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___4L4Hj, {
                    [sty.imgglobal_theme_classic___4L4HjeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image89.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__lcytk)}>
              <div
                data-plasmic-name={"imageWindow12"}
                data-plasmic-override={overrides.imageWindow12}
                className={classNames(projectcss.all, sty.imageWindow12, {
                  [sty.imageWindow12global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ossRc, {
                    [sty.imgglobal_theme_classic__ossRCeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"338px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image90.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l2EyW)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rx8X1,
              {
                [sty.textglobal_theme_classic__rx8X1ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"Game Environment/Props"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sbcx4,
              {
                [sty.textglobal_theme_classic__sbcx4ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>{'"Le Chunk E Chonks Office" - '}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link___1OKp3
                  )}
                  component={Link}
                  href={"https://redpandastudios.net"}
                  platform={"nextjs"}
                >
                  {"PANDAMONIUM: Diko Dating Sim (Red Panda Studios)"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns___7EO9D)}
          >
            <div className={classNames(projectcss.all, sty.column__jkNfq)}>
              <div
                data-plasmic-name={"imageWindow13"}
                data-plasmic-override={overrides.imageWindow13}
                className={classNames(projectcss.all, sty.imageWindow13, {
                  [sty.imageWindow13global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nGAy, {
                    [sty.imgglobal_theme_classic__nGAyeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/ezgifComOptimizeGif.gif",
                    fullWidth: 1920,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bMCqR)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oyMv0,
              {
                [sty.textglobal_theme_classic__oyMv0ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"Stylized Product Renders"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vZ0A0,
              {
                [sty.textglobal_theme_classic__vZ0A0ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {'"Balisong Oil Designs" - Promotional Material for'}
              </React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__e0Gy
                  )}
                  component={Link}
                  href={"https://carbonhoneyoil.com"}
                  platform={"nextjs"}
                >
                  {" Carbon Honey"}
                </PlasmicLink__>
              }
              <React.Fragment>{" and "}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link___9FYJd
                  )}
                  component={Link}
                  href={"https://www.instagram.com/canto.group/"}
                  platform={"nextjs"}
                >
                  {"Canto Group"}
                </PlasmicLink__>
              }
              <React.Fragment>{" Balisong Oil"}</React.Fragment>
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__xsaBv)}
          >
            <div className={classNames(projectcss.all, sty.column___5J1Zm)}>
              <div
                data-plasmic-name={"imageWindow14"}
                data-plasmic-override={overrides.imageWindow14}
                className={classNames(projectcss.all, sty.imageWindow14, {
                  [sty.imageWindow14global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__gqtWx, {
                    [sty.imgglobal_theme_classic__gqtWxeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image91.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__sqhA)}>
              <div
                data-plasmic-name={"imageWindow15"}
                data-plasmic-override={overrides.imageWindow15}
                className={classNames(projectcss.all, sty.imageWindow15, {
                  [sty.imageWindow15global_theme_classic]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__n3Lj7, {
                    [sty.imgglobal_theme_classic__n3Lj7ENktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/disuko_website_retro_version/images/image92.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bx3Ke,
              {
                [sty.textglobal_theme_classic__bx3KeeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"Easel Renders"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__otFiR,
              {
                [sty.textglobal_theme_classic__otFiReNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {
              "Created for a vertically mounted display installation in the Chatham University Library."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r9RQx)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__itZgT)}
            >
              <Window
                className={classNames("__wab_instance", sty.window__fr28D)}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jhARg)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/animestreetWebp.webp",
                      fullWidth: 800,
                      fullHeight: 1422,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Pastel Street"}
                windowTitle={"Easel Render"}
              />

              <Window
                className={classNames("__wab_instance", sty.window__f4SwI)}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__eoSaQ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/smartiesWebp.webp",
                      fullWidth: 600,
                      fullHeight: 1067,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Smarties"}
                windowTitle={"Easel Render"}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gu1B3)}
            >
              <Window
                className={classNames("__wab_instance", sty.window__rsrSo)}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kydd7)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/strawberrymilkWebp.webp",
                      fullWidth: 800,
                      fullHeight: 1422,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Strawberry Milk"}
                windowTitle={"Easel Render"}
              />

              <Window
                className={classNames("__wab_instance", sty.window__j6Ggz)}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lFjfj)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/ramuneWebp2.webp",
                      fullWidth: 600,
                      fullHeight: 1067,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Blueberry Ramune"}
                windowTitle={"Easel Render"}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__eaSC)}>
              <Window
                className={classNames("__wab_instance", sty.window__z0XZh)}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jn5Cd)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/cakePopWebp.webp",
                      fullWidth: 800,
                      fullHeight: 1422,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Kawaii Cake Pop"}
                windowTitle={"Easel Render"}
              />
            </div>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rtrz)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cfdNj,
              {
                [sty.textglobal_theme_classic__cfdNjeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"Characters"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zxvJm)}
          >
            <div
              data-plasmic-name={"imageWindow"}
              data-plasmic-override={overrides.imageWindow}
              className={classNames(projectcss.all, sty.imageWindow, {
                [sty.imageWindowglobal_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ikB1T, {
                  [sty.imgglobal_theme_classic__ikB1TeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/image67.gif",
                  fullWidth: 600,
                  fullHeight: 338,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"imageWindow2"}
              data-plasmic-override={overrides.imageWindow2}
              className={classNames(projectcss.all, sty.imageWindow2, {
                [sty.imageWindow2global_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__f8Rbo, {
                  [sty.imgglobal_theme_classic__f8RboeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "100%"
                    : "auto"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/licavoliSherbPoseTransparentPng.png",
                  fullWidth: 426,
                  fullHeight: 621,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"imageWindow3"}
              data-plasmic-override={overrides.imageWindow3}
              className={classNames(projectcss.all, sty.imageWindow3, {
                [sty.imageWindow3global_theme_classic]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___3YcnL, {
                  [sty.imgglobal_theme_classic___3YcnLeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                displayHeight={"338px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/disuko_website_retro_version/images/image68.gif",
                  fullWidth: 256,
                  fullHeight: 256,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Stack__>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__phMVt)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__n5E7Q,
              {
                [sty.textglobal_theme_classic__n5E7QeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              }
            )}
          >
            {"CAD & 3D Printing"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qzRp)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__nGLw4, {
                [sty.freeBoxglobal_theme_classic__nGLw4ENktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hZcxb,
                  {
                    [sty.textglobal_theme_classic__hZcxbeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"The Boba-song Butterfly Knife Trainer"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mHgj,
                  {
                    [sty.textglobal_theme_classic__mHgjeNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {'"Create With Nabalis" Contest Top 10 of 100 Submissions'}
              </div>
              {(() => {
                const child$Props = {
                  arrowColor: true ? "#AF3386" : undefined,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["cad2", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: true,
                  className: classNames("__wab_instance", sty.cad2),
                  initialSlide: generateStateValueProp($state, [
                    "cad2",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["cad2"] = ref;
                  },
                  sliderScopeClassName: sty["cad2__slider"]
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "cad2.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"cad2"}
                    data-plasmic-override={overrides.cad2}
                    {...child$Props}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zTj2)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__ztIK)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/mainImage2Png.png",
                          fullWidth: 1080,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5FhXg
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xeSpZ)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/notableFeaturesPng.png",
                          fullWidth: 1080,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wqJmf)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__cbmFx)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/colorConceptsPng.png",
                          fullWidth: 1080,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jasSn)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__kjAsN)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/screenshot20240311163819Png.png",
                          fullWidth: 1522,
                          fullHeight: 895,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__eagbW, {
                [sty.freeBoxglobal_theme_classic__eagbWeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jr0Ii,
                  {
                    [sty.textglobal_theme_classic__jr0IieNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {"Disuko Rhythm Game Console"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ickiw,
                  {
                    [sty.textglobal_theme_classic__ickiweNktM]: hasVariant(
                      globalVariants,
                      "theme",
                      "classic"
                    )
                  }
                )}
              >
                {
                  "Project for the Chatham University Immersive Media Studio Space"
                }
              </div>
              {(() => {
                const child$Props = {
                  arrowColor: true ? "#AF3386" : undefined,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["cad", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: true,
                  className: classNames("__wab_instance", sty.cad),
                  initialSlide: generateStateValueProp($state, [
                    "cad",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["cad"] = ref;
                  },
                  sliderScopeClassName: sty["cad__slider"]
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "cad.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"cad"}
                    data-plasmic-override={overrides.cad}
                    {...child$Props}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hAcNc)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__q9Bhb)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/consoleShellWipJpg.jpg",
                          fullWidth: 800,
                          fullHeight: 600,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dKr6K,
                          {
                            [sty.textglobal_theme_classic__dKr6KeNktM]:
                              hasVariant(globalVariants, "theme", "classic")
                          }
                        )}
                      >
                        {
                          "Designing a shell for a mini rhythm game console in fusion 360."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nrUgy)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___0Bom)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/consoleShellPrintsJpg.jpg",
                          fullWidth: 800,
                          fullHeight: 600,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ry826,
                          {
                            [sty.textglobal_theme_classic__ry826ENktM]:
                              hasVariant(globalVariants, "theme", "classic")
                          }
                        )}
                      >
                        {
                          "Iterating with prototypes to fit electronic components."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fSsGr)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__gOug2)}
                        displayHeight={"400px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"none"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={{
                          src: "/plasmic/disuko_website_retro_version/images/disukoRhythmGameSp24Jpg.jpg",
                          fullWidth: 1080,
                          fullHeight: 1080,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qth07,
                          {
                            [sty.textglobal_theme_classic__qth07ENktM]:
                              hasVariant(globalVariants, "theme", "classic")
                          }
                        )}
                      >
                        {"The final console!"}
                      </div>
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  _3DDesign: [
    "_3DDesign",
    "navbar",
    "windowButton",
    "imageWindow19",
    "imageWindow20",
    "imageWindow21",
    "imageWindow16",
    "imageWindow17",
    "imageWindow18",
    "imageWindow22",
    "imageWindow4",
    "imageWindow5",
    "imageWindow10",
    "imageWindow6",
    "imageWindow7",
    "imageWindow11",
    "imageWindow8",
    "imageWindow9",
    "imageWindow12",
    "imageWindow13",
    "imageWindow14",
    "imageWindow15",
    "imageWindow",
    "imageWindow2",
    "imageWindow3",
    "cad2",
    "cad"
  ],
  navbar: ["navbar"],
  windowButton: ["windowButton"],
  imageWindow19: ["imageWindow19"],
  imageWindow20: ["imageWindow20"],
  imageWindow21: ["imageWindow21"],
  imageWindow16: ["imageWindow16"],
  imageWindow17: ["imageWindow17"],
  imageWindow18: ["imageWindow18"],
  imageWindow22: ["imageWindow22"],
  imageWindow4: ["imageWindow4"],
  imageWindow5: ["imageWindow5"],
  imageWindow10: ["imageWindow10"],
  imageWindow6: ["imageWindow6"],
  imageWindow7: ["imageWindow7"],
  imageWindow11: ["imageWindow11"],
  imageWindow8: ["imageWindow8"],
  imageWindow9: ["imageWindow9"],
  imageWindow12: ["imageWindow12"],
  imageWindow13: ["imageWindow13"],
  imageWindow14: ["imageWindow14"],
  imageWindow15: ["imageWindow15"],
  imageWindow: ["imageWindow"],
  imageWindow2: ["imageWindow2"],
  imageWindow3: ["imageWindow3"],
  cad2: ["cad2"],
  cad: ["cad"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  _3DDesign: "div";
  navbar: typeof Navbar;
  windowButton: typeof WindowButton;
  imageWindow19: "div";
  imageWindow20: "div";
  imageWindow21: "div";
  imageWindow16: "div";
  imageWindow17: "div";
  imageWindow18: "div";
  imageWindow22: "div";
  imageWindow4: "div";
  imageWindow5: "div";
  imageWindow10: "div";
  imageWindow6: "div";
  imageWindow7: "div";
  imageWindow11: "div";
  imageWindow8: "div";
  imageWindow9: "div";
  imageWindow12: "div";
  imageWindow13: "div";
  imageWindow14: "div";
  imageWindow15: "div";
  imageWindow: "div";
  imageWindow2: "div";
  imageWindow3: "div";
  cad2: typeof SliderWrapper;
  cad: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio3DDesign2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPortfolio3DDesign2__VariantsArgs;
    args?: PlasmicPortfolio3DDesign2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPortfolio3DDesign2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPortfolio3DDesign2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPortfolio3DDesign2__ArgProps,
          internalVariantPropNames: PlasmicPortfolio3DDesign2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPortfolio3DDesign2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "_3DDesign") {
    func.displayName = "PlasmicPortfolio3DDesign2";
  } else {
    func.displayName = `PlasmicPortfolio3DDesign2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPortfolio3DDesign2 = Object.assign(
  // Top-level PlasmicPortfolio3DDesign2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("_3DDesign")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    windowButton: makeNodeComponent("windowButton"),
    imageWindow19: makeNodeComponent("imageWindow19"),
    imageWindow20: makeNodeComponent("imageWindow20"),
    imageWindow21: makeNodeComponent("imageWindow21"),
    imageWindow16: makeNodeComponent("imageWindow16"),
    imageWindow17: makeNodeComponent("imageWindow17"),
    imageWindow18: makeNodeComponent("imageWindow18"),
    imageWindow22: makeNodeComponent("imageWindow22"),
    imageWindow4: makeNodeComponent("imageWindow4"),
    imageWindow5: makeNodeComponent("imageWindow5"),
    imageWindow10: makeNodeComponent("imageWindow10"),
    imageWindow6: makeNodeComponent("imageWindow6"),
    imageWindow7: makeNodeComponent("imageWindow7"),
    imageWindow11: makeNodeComponent("imageWindow11"),
    imageWindow8: makeNodeComponent("imageWindow8"),
    imageWindow9: makeNodeComponent("imageWindow9"),
    imageWindow12: makeNodeComponent("imageWindow12"),
    imageWindow13: makeNodeComponent("imageWindow13"),
    imageWindow14: makeNodeComponent("imageWindow14"),
    imageWindow15: makeNodeComponent("imageWindow15"),
    imageWindow: makeNodeComponent("imageWindow"),
    imageWindow2: makeNodeComponent("imageWindow2"),
    imageWindow3: makeNodeComponent("imageWindow3"),
    cad2: makeNodeComponent("cad2"),
    cad: makeNodeComponent("cad"),

    // Metadata about props expected for PlasmicPortfolio3DDesign2
    internalVariantProps: PlasmicPortfolio3DDesign2__VariantProps,
    internalArgProps: PlasmicPortfolio3DDesign2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "3D Design",
      description: '3D Design portfolio of Angelo "Disuko" Licavoli',
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/3d-Design"
    }
  }
);

export default PlasmicPortfolio3DDesign2;
/* prettier-ignore-end */
