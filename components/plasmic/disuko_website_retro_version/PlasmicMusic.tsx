/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: Omf247aRwark

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import MusicAlbum from "../../MusicAlbum"; // plasmic-import: xhHvzxTdb1Y8/component
import YouTube from "@plasmicpkgs/react-youtube";
import Footer from "../../Footer"; // plasmic-import: shKoGjSwLEEB/component
import Snowflakes from "../../Snowflakes"; // plasmic-import: dS2R33xrvHt2/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 3K9IqsAFaaID/globalVariant
import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicMusic.module.css"; // plasmic-import: Omf247aRwark/css

createPlasmicElementProxy;

export type PlasmicMusic__VariantMembers = {};
export type PlasmicMusic__VariantsArgs = {};
type VariantPropType = keyof PlasmicMusic__VariantsArgs;
export const PlasmicMusic__VariantProps = new Array<VariantPropType>();

export type PlasmicMusic__ArgsType = {};
type ArgPropType = keyof PlasmicMusic__ArgsType;
export const PlasmicMusic__ArgProps = new Array<ArgPropType>();

export type PlasmicMusic__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  main?: Flex__<"div">;
  spotify?: Flex__<typeof WindowButton>;
  appleMusic?: Flex__<typeof WindowButton>;
  bandcamp?: Flex__<typeof WindowButton>;
  pirateThisSong?: Flex__<typeof MusicAlbum>;
  _727PpDeathLaser?: Flex__<typeof MusicAlbum>;
  lilypadTea?: Flex__<typeof MusicAlbum>;
  sendoff?: Flex__<typeof MusicAlbum>;
  peachy?: Flex__<typeof MusicAlbum>;
  bridgeInTheWoods?: Flex__<typeof MusicAlbum>;
  withYou?: Flex__<typeof MusicAlbum>;
  dinoHop?: Flex__<typeof MusicAlbum>;
  celestialBallad?: Flex__<typeof MusicAlbum>;
  flutter?: Flex__<typeof MusicAlbum>;
  bubbleTeaRemix?: Flex__<typeof MusicAlbum>;
  iceCreamParlor?: Flex__<typeof MusicAlbum>;
  bigShotRemix?: Flex__<typeof MusicAlbum>;
  bigShotRemix2?: Flex__<typeof MusicAlbum>;
  footer?: Flex__<typeof Footer>;
  snowflakes?: Flex__<typeof Snowflakes>;
};

export interface DefaultMusicProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMusic__RenderFunc(props: {
  variants: PlasmicMusic__VariantsArgs;
  args: PlasmicMusic__ArgsType;
  overrides: PlasmicMusic__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicMusic.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMusic.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMusic.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicMusic.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicMusic.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicMusic.pageMetadata.ogImageSrc}
        />
        <link rel="canonical" href={PlasmicMusic.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            hasGap={true}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
          >
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal___62Ojm, {
                [sty.revealglobal_theme_classic___62OjmeNktM]: hasVariant(
                  globalVariants,
                  "theme",
                  "classic"
                )
              })}
              direction={"up"}
              effect={"slide"}
              triggerOnce={true}
            >
              <Window
                className={classNames("__wab_instance", sty.window__q0I21, {
                  [sty.windowglobal_theme_classic__q0I21ENktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                })}
                showImage={false}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wPb6P)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"474px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/mixerPng.png",
                      fullWidth: 1597,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={
                  "taking inspiration from chiptune, rhythm game soundtracks, and \u201ckawaii\u201d culture, i make music filled with high energy edm drops and expressive composition!disuko was started in 2019, and I aim to share and express my sense of self with the world through music."
                }
                windowTitle={"Music Production"}
              >
                <WindowButton
                  data-plasmic-name={"spotify"}
                  data-plasmic-override={overrides.spotify}
                  className={classNames("__wab_instance", sty.spotify)}
                  link={
                    "https://open.spotify.com/artist/7miowOQruHb1GpKBlV4tjl?si=ct2bbV0YRiqixl09RPlm6Q"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eijAa,
                      {
                        [sty.textglobal_theme_classic__eijAaeNktM]: hasVariant(
                          globalVariants,
                          "theme",
                          "classic"
                        )
                      }
                    )}
                  >
                    {"Spotify"}
                  </div>
                </WindowButton>
                <WindowButton
                  data-plasmic-name={"appleMusic"}
                  data-plasmic-override={overrides.appleMusic}
                  className={classNames("__wab_instance", sty.appleMusic)}
                  link={"https://music.apple.com/us/artist/disuko/1497273303"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ilV75,
                      {
                        [sty.textglobal_theme_classic__ilV75ENktM]: hasVariant(
                          globalVariants,
                          "theme",
                          "classic"
                        )
                      }
                    )}
                  >
                    {"Apple Music"}
                  </div>
                </WindowButton>
                <WindowButton
                  data-plasmic-name={"bandcamp"}
                  data-plasmic-override={overrides.bandcamp}
                  className={classNames("__wab_instance", sty.bandcamp)}
                  link={"disuko.bandcamp.com"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vj4I0,
                      {
                        [sty.textglobal_theme_classic__vj4I0ENktM]: hasVariant(
                          globalVariants,
                          "theme",
                          "classic"
                        )
                      }
                    )}
                  >
                    {"Bandcamp"}
                  </div>
                </WindowButton>
                <WindowButton
                  className={classNames(
                    "__wab_instance",
                    sty.windowButton___8OpWk
                  )}
                  link={
                    "https://music.youtube.com/channel/UCbAnd4M7lDhKXfZfD09rZnA"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0MC2,
                      {
                        [sty.textglobal_theme_classic___0MC2ENktM]: hasVariant(
                          globalVariants,
                          "theme",
                          "classic"
                        )
                      }
                    )}
                  >
                    {"YouTube Music"}
                  </div>
                </WindowButton>
              </Window>
            </Reveal>
            <div className={classNames(projectcss.all, sty.freeBox___6KiX9)}>
              <MusicAlbum
                data-plasmic-name={"pirateThisSong"}
                data-plasmic-override={overrides.pirateThisSong}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/image60.png",
                  fullWidth: 300,
                  fullHeight: 300,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/pirate-this-song-xd-single/1763226239"
                }
                bandcampLink={
                  "https://on3ko.bandcamp.com/track/pirate-this-song-xd"
                }
                className={classNames("__wab_instance", sty.pirateThisSong)}
                description={"PIRATE THIS SONG XD"}
                spotifyLink={
                  "https://open.spotify.com/album/5Q2PB1ghjrs5xoNA6tiWhs?si=6OblvGb0T76mJNS1cFBE1Q"
                }
                youTubeLink={"https://www.youtube.com/watch?v=DhCda2W72MA"}
              />

              <MusicAlbum
                data-plasmic-name={"_727PpDeathLaser"}
                data-plasmic-override={overrides._727PpDeathLaser}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/image61.png",
                  fullWidth: 1200,
                  fullHeight: 1200,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/727pp-death-lazer-single/1759673069"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/727pp-death-lazer"
                }
                className={classNames("__wab_instance", sty._727PpDeathLaser)}
                description={"727PP DEATH LAZER"}
                spotifyLink={
                  "https://open.spotify.com/track/1rYumVgsK5V0xyCyuxyieV?si=42fc5e8a271840c2"
                }
                youTubeLink={"https://www.youtube.com/watch?v=E9MCnwh2AyI"}
              />

              <MusicAlbum
                data-plasmic-name={"lilypadTea"}
                data-plasmic-override={overrides.lilypadTea}
                albumArt={
                  "https://i.scdn.co/image/ab67616d0000b273203e5384111739d76259c44a"
                }
                appleMusicLink={
                  "https://music.apple.com/us/album/lilypad-tea-single/1731429759"
                }
                bandcampLink={"https://disuko.bandcamp.com/track/lilypad-tea"}
                className={classNames("__wab_instance", sty.lilypadTea)}
                description={"lilypad tea (w/ wave meow)"}
                spotifyLink={
                  "https://open.spotify.com/track/5OnHbShTPrQDUEqZdnOMVc?si=eeccd37659cb449e"
                }
                youTubeLink={
                  "https://www.youtube.com/playlist?list=OLAK5uy_m0gGA463KvMHI0d00krtu8GIuCylN8YI0"
                }
              />

              <MusicAlbum
                data-plasmic-name={"sendoff"}
                data-plasmic-override={overrides.sendoff}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/sendoffJpg.jpg",
                  fullWidth: 1200,
                  fullHeight: 1200,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/sendoff-feat-inverted-silence-disukos-pandaflip-single/1719666906"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/inverted-silence-sendoff-disukos-pandaflip"
                }
                className={classNames("__wab_instance", sty.sendoff)}
                description={"Sendoff (Disuko's Pandaflip)"}
                spotifyLink={
                  "https://open.spotify.com/track/4TnMlGiqvj8j7jnC7aSZiv?si=bb37c6d181624cb6"
                }
                youTubeLink={"https://youtu.be/FZ9BhInKVBo?si=KyEQDPIybkndYlaI"}
              />

              <MusicAlbum
                data-plasmic-name={"peachy"}
                data-plasmic-override={overrides.peachy}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/image29.png",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/peachy-single/1697331896"
                }
                bandcampLink={"https://disuko.bandcamp.com/track/peachy"}
                className={classNames("__wab_instance", sty.peachy)}
                description={"Peachy!"}
                youTubeLink={"https://www.youtube.com/watch?v=oNyVKMXqcXM"}
              />

              <MusicAlbum
                data-plasmic-name={"bridgeInTheWoods"}
                data-plasmic-override={overrides.bridgeInTheWoods}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/a026994012416Jpg.jpg",
                  fullWidth: 700,
                  fullHeight: 700,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/bridge-in-the-woods-ep/1679470108"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/album/bridge-in-the-woods"
                }
                className={classNames("__wab_instance", sty.bridgeInTheWoods)}
                description={"Bridge In The Woods (EP)"}
                youTubeLink={
                  "https://www.youtube.com/watch?v=7Ji2LrRf7LA&list=OLAK5uy_lDRBJvw47INu70NhqFAb0vX5b7yGfGcUk"
                }
              />

              <MusicAlbum
                data-plasmic-name={"withYou"}
                data-plasmic-override={overrides.withYou}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/image62.png",
                  fullWidth: 700,
                  fullHeight: 700,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/with-you-single/1671681941"
                }
                bandcampLink={"https://disuko.bandcamp.com/track/with-you"}
                className={classNames("__wab_instance", sty.withYou)}
                description={"With You"}
                spotifyLink={
                  "https://open.spotify.com/track/1SvfY0CLvOeI8PRtG2fyC1?si=5d5c46d9d6534d04"
                }
                youTubeLink={"https://www.youtube.com/watch?v=lrPjNaRol44"}
              />

              <MusicAlbum
                data-plasmic-name={"dinoHop"}
                data-plasmic-override={overrides.dinoHop}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/a195903275616Jpg.jpg",
                  fullWidth: 700,
                  fullHeight: 700,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/dino-hop/1664431617?i=1664432364"
                }
                bandcampLink={"https://disuko.bandcamp.com/track/dino-hop"}
                className={classNames("__wab_instance", sty.dinoHop)}
                description={"Dino Hop (Spectrum Compilation)"}
                youTubeLink={"https://www.youtube.com/watch?v=dGwWZ-y0VbU"}
              />

              <MusicAlbum
                data-plasmic-name={"celestialBallad"}
                data-plasmic-override={overrides.celestialBallad}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/celestialBalladJpg.jpg",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/celestial-ballad-thanks-for-1k-on-youtube-single/1641480507"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/celestial-ballad-thank-you-for-1k-on-youtube"
                }
                className={classNames("__wab_instance", sty.celestialBallad)}
                description={"Celestial Ballad (thank you for 1k on youtube)"}
                spotifyLink={
                  "https://open.spotify.com/track/7f5MD7Ij5QOjyMAtAGniHz?si=78a633ee67be4325"
                }
                youTubeLink={
                  "https://www.youtube.com/watch?v=Hf6agWZjOhM&list=OLAK5uy_lWrR1h1sui-N-eWhoFAHLxri-qG30da8s"
                }
              />

              <MusicAlbum
                data-plasmic-name={"flutter"}
                data-plasmic-override={overrides.flutter}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/flutterJpg2.jpg",
                  fullWidth: 500,
                  fullHeight: 500,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/flutter-single/1639917222"
                }
                bandcampLink={"https://disuko.bandcamp.com/track/flutter"}
                className={classNames("__wab_instance", sty.flutter)}
                description={"flutter"}
                spotifyLink={
                  "https://open.spotify.com/track/3dzUSWYs6Fk1mDh734kKRW?si=8b3b1ccd6f3a4d71"
                }
                youTubeLink={"https://www.youtube.com/watch?v=O15vCyAnRJg"}
              />

              <MusicAlbum
                data-plasmic-name={"bubbleTeaRemix"}
                data-plasmic-override={overrides.bubbleTeaRemix}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/a118128692710Jpg.jpg",
                  fullWidth: 1200,
                  fullHeight: 1200,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/bubble-tea-feat-juu-cinders-remix/1558875434?i=1558875435"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/dark-cat-bubble-tea-disuko-remix"
                }
                className={classNames("__wab_instance", sty.bubbleTeaRemix)}
                description={"Bubble Tea (Disuko Remix)"}
                youTubeLink={"https://www.youtube.com/watch?v=d8nWw5km8oY"}
              />

              <MusicAlbum
                data-plasmic-name={"iceCreamParlor"}
                data-plasmic-override={overrides.iceCreamParlor}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/iceCreamParlorJpg.jpg",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/interdimensional-ice-cream-parlor/1602570432"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/album/interdimensional-ice-cream-parlor"
                }
                className={classNames("__wab_instance", sty.iceCreamParlor)}
                description={"Interdimensional Ice Cream Parlor Album"}
                youTubeLink={"https://youtu.be/-Q8PLmlzuVU?si=jllwaeak1-pcHSLD"}
              />

              <MusicAlbum
                data-plasmic-name={"bigShotRemix"}
                data-plasmic-override={overrides.bigShotRemix}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/bigShotJpg.jpg",
                  fullWidth: 3000,
                  fullHeight: 3000,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/big-shot-disukos-hyp3rl1nk-bl0ck3d-remix/1588405645?i=1588405646"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/toby-fox-big-shot-disukos-hyp3rl1nk-bl0ck3d-remix"
                }
                className={classNames("__wab_instance", sty.bigShotRemix)}
                description={"BIG SHOT (Disuko's HYP3RL1NK BL0CK3D Remix)"}
                youTubeLink={"https://www.youtube.com/watch?v=RjSIMB61uBU"}
              />

              <MusicAlbum
                data-plasmic-name={"bigShotRemix2"}
                data-plasmic-override={overrides.bigShotRemix2}
                albumArt={{
                  src: "/plasmic/disuko_website_retro_version/images/image63.png",
                  fullWidth: 700,
                  fullHeight: 700,
                  aspectRatio: undefined
                }}
                appleMusicLink={
                  "https://music.apple.com/us/album/fallen-angel-feat-tanger-disukos-divine-remix-single/1623303390"
                }
                bandcampLink={
                  "https://disuko.bandcamp.com/track/tanger-fallen-angel-disukos-divine-remix"
                }
                className={classNames("__wab_instance", sty.bigShotRemix2)}
                description={"Fallen Angel (Disuko's Divine Remix)"}
                spotifyLink={
                  "https://open.spotify.com/track/2CbGj6qNGFTqgP7sPFDdWB?si=9f2f5b152ce34fc6"
                }
                youTubeLink={"https://www.youtube.com/watch?v=NbpZa9i_8uo"}
              />
            </div>
            <Reveal
              cascade={true}
              className={classNames("__wab_instance", sty.reveal___8DcSr)}
              direction={"up"}
              effect={"slide"}
              triggerOnce={true}
            >
              <Window
                className={classNames("__wab_instance", sty.window__yCiLn)}
                showImage={false}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mkuVl)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"474px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/mixerPng.png",
                      fullWidth: 1597,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={
                  "I also occasionally do DJ sets! I use a DJ controller to mix music I enjoy, and also play live version of my own music using MIDI controllers and Ableton Live."
                }
                windowTitle={"Live Performance"}
              />
            </Reveal>
            <div className={classNames(projectcss.all, sty.freeBox__b6Lww)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r5Fn9)}
              >
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__hJhn5)}
                  videoId={"/T8scVcjPDDY"}
                />

                <YouTube
                  className={classNames("__wab_instance", sty.youTube__yyvmz)}
                  videoId={"HPgDpTFdI4o"}
                />

                <YouTube
                  className={classNames("__wab_instance", sty.youTube__vt36J)}
                  videoId={"l6Bh6fn8x5c"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wGgf1)}
              >
                <YouTube
                  className={classNames("__wab_instance", sty.youTube__kgcx)}
                  videoId={"dJvF_pr5P0Q"}
                />

                <YouTube
                  className={classNames("__wab_instance", sty.youTube__im5Q)}
                  videoId={"4Sg8m04B_uI"}
                />

                <YouTube
                  className={classNames("__wab_instance", sty.youTube__i2Re9)}
                  videoId={"Qu2Bg9x-lrk"}
                />
              </Stack__>
            </div>
          </Stack__>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <Snowflakes
            data-plasmic-name={"snowflakes"}
            data-plasmic-override={overrides.snowflakes}
            className={classNames("__wab_instance", sty.snowflakes)}
          />

          <WindowButton
            className={classNames("__wab_instance", sty.windowButton__fk8Nu, {
              [sty.windowButtonglobal_theme_classic__fk8NUeNktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
            link={`/portfolio`}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hwk8B,
                {
                  [sty.textglobal_theme_classic__hwk8BeNktM]: hasVariant(
                    globalVariants,
                    "theme",
                    "classic"
                  )
                }
              )}
            >
              {"<- Back To Portfolio"}
            </div>
          </WindowButton>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "main",
    "spotify",
    "appleMusic",
    "bandcamp",
    "pirateThisSong",
    "_727PpDeathLaser",
    "lilypadTea",
    "sendoff",
    "peachy",
    "bridgeInTheWoods",
    "withYou",
    "dinoHop",
    "celestialBallad",
    "flutter",
    "bubbleTeaRemix",
    "iceCreamParlor",
    "bigShotRemix",
    "bigShotRemix2",
    "footer",
    "snowflakes"
  ],
  navbar: ["navbar"],
  main: [
    "main",
    "spotify",
    "appleMusic",
    "bandcamp",
    "pirateThisSong",
    "_727PpDeathLaser",
    "lilypadTea",
    "sendoff",
    "peachy",
    "bridgeInTheWoods",
    "withYou",
    "dinoHop",
    "celestialBallad",
    "flutter",
    "bubbleTeaRemix",
    "iceCreamParlor",
    "bigShotRemix",
    "bigShotRemix2"
  ],
  spotify: ["spotify"],
  appleMusic: ["appleMusic"],
  bandcamp: ["bandcamp"],
  pirateThisSong: ["pirateThisSong"],
  _727PpDeathLaser: ["_727PpDeathLaser"],
  lilypadTea: ["lilypadTea"],
  sendoff: ["sendoff"],
  peachy: ["peachy"],
  bridgeInTheWoods: ["bridgeInTheWoods"],
  withYou: ["withYou"],
  dinoHop: ["dinoHop"],
  celestialBallad: ["celestialBallad"],
  flutter: ["flutter"],
  bubbleTeaRemix: ["bubbleTeaRemix"],
  iceCreamParlor: ["iceCreamParlor"],
  bigShotRemix: ["bigShotRemix"],
  bigShotRemix2: ["bigShotRemix2"],
  footer: ["footer"],
  snowflakes: ["snowflakes"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  main: "div";
  spotify: typeof WindowButton;
  appleMusic: typeof WindowButton;
  bandcamp: typeof WindowButton;
  pirateThisSong: typeof MusicAlbum;
  _727PpDeathLaser: typeof MusicAlbum;
  lilypadTea: typeof MusicAlbum;
  sendoff: typeof MusicAlbum;
  peachy: typeof MusicAlbum;
  bridgeInTheWoods: typeof MusicAlbum;
  withYou: typeof MusicAlbum;
  dinoHop: typeof MusicAlbum;
  celestialBallad: typeof MusicAlbum;
  flutter: typeof MusicAlbum;
  bubbleTeaRemix: typeof MusicAlbum;
  iceCreamParlor: typeof MusicAlbum;
  bigShotRemix: typeof MusicAlbum;
  bigShotRemix2: typeof MusicAlbum;
  footer: typeof Footer;
  snowflakes: typeof Snowflakes;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMusic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMusic__VariantsArgs;
    args?: PlasmicMusic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMusic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMusic__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMusic__ArgProps,
          internalVariantPropNames: PlasmicMusic__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMusic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMusic";
  } else {
    func.displayName = `PlasmicMusic.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMusic = Object.assign(
  // Top-level PlasmicMusic renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    main: makeNodeComponent("main"),
    spotify: makeNodeComponent("spotify"),
    appleMusic: makeNodeComponent("appleMusic"),
    bandcamp: makeNodeComponent("bandcamp"),
    pirateThisSong: makeNodeComponent("pirateThisSong"),
    _727PpDeathLaser: makeNodeComponent("_727PpDeathLaser"),
    lilypadTea: makeNodeComponent("lilypadTea"),
    sendoff: makeNodeComponent("sendoff"),
    peachy: makeNodeComponent("peachy"),
    bridgeInTheWoods: makeNodeComponent("bridgeInTheWoods"),
    withYou: makeNodeComponent("withYou"),
    dinoHop: makeNodeComponent("dinoHop"),
    celestialBallad: makeNodeComponent("celestialBallad"),
    flutter: makeNodeComponent("flutter"),
    bubbleTeaRemix: makeNodeComponent("bubbleTeaRemix"),
    iceCreamParlor: makeNodeComponent("iceCreamParlor"),
    bigShotRemix: makeNodeComponent("bigShotRemix"),
    bigShotRemix2: makeNodeComponent("bigShotRemix2"),
    footer: makeNodeComponent("footer"),
    snowflakes: makeNodeComponent("snowflakes"),

    // Metadata about props expected for PlasmicMusic
    internalVariantProps: PlasmicMusic__VariantProps,
    internalArgProps: PlasmicMusic__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "disuko - music 🌸",
      description:
        "~i produce electronic music and also DJ! i like making music with high energy and cute sounds. my genres range from kawaii future bass to hardcore!",
      ogImageSrc:
        "https://site-assets.plasmic.app/f33b16e8e3629b301959c659f5c8f11d.jpg",
      canonical: "https://disuko.gay/music"
    }
  }
);

export default PlasmicMusic;
/* prettier-ignore-end */
