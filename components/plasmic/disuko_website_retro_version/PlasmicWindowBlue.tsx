/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: QxkFplM-x8NR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicWindowBlue.module.css"; // plasmic-import: QxkFplM-x8NR/css

import NounPixelHeart10989631SvgIcon from "./icons/PlasmicIcon__NounPixelHeart10989631Svg"; // plasmic-import: tvndHRt1AD9R/icon

createPlasmicElementProxy;

export type PlasmicWindowBlue__VariantMembers = {};
export type PlasmicWindowBlue__VariantsArgs = {};
type VariantPropType = keyof PlasmicWindowBlue__VariantsArgs;
export const PlasmicWindowBlue__VariantProps = new Array<VariantPropType>();

export type PlasmicWindowBlue__ArgsType = {
  windowTitle?: string;
  windowText?: string;
  linkDestination?: string;
  showImage?: boolean;
  windowImage?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWindowBlue__ArgsType;
export const PlasmicWindowBlue__ArgProps = new Array<ArgPropType>(
  "windowTitle",
  "windowText",
  "linkDestination",
  "showImage",
  "windowImage",
  "children"
);

export type PlasmicWindowBlue__OverridesType = {
  music?: Flex__<"a"> & Partial<LinkProps>;
  xButton?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
};

export interface DefaultWindowBlueProps {
  windowTitle?: string;
  windowText?: string;
  linkDestination?: string;
  showImage?: boolean;
  windowImage?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWindowBlue__RenderFunc(props: {
  variants: PlasmicWindowBlue__VariantsArgs;
  args: PlasmicWindowBlue__ArgsType;
  overrides: PlasmicWindowBlue__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          windowTitle: "Window Title",
          windowText: "Lorem Impsum or something",
          showImage: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();

  return (
    <PlasmicLink__
      data-plasmic-name={"music"}
      data-plasmic-override={overrides.music}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.music,
        {
          [sty.musicglobal_theme_classic]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        }
      )}
      component={Link}
      href={(() => {
        try {
          return $props.linkDestination;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"nextjs"}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__aRtb6, {
          [sty.freeBoxglobal_theme_classic__aRtb6ENktM]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dWol6,
            {
              [sty.textglobal_theme_classic__dWol6ENktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.windowTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Window Title";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicLink__
          data-plasmic-name={"xButton"}
          data-plasmic-override={overrides.xButton}
          className={classNames(projectcss.all, projectcss.a, sty.xButton, {
            [sty.xButtonglobal_theme_classic]: hasVariant(
              globalVariants,
              "theme",
              "classic"
            )
          })}
          component={Link}
          href={(() => {
            try {
              return $props.linkDestination;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={async event => {
            const $steps = {};

            $steps["updateVariant"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    undefined;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateVariant"] != null &&
              typeof $steps["updateVariant"] === "object" &&
              typeof $steps["updateVariant"].then === "function"
            ) {
              $steps["updateVariant"] = await $steps["updateVariant"];
            }
          }}
          platform={"nextjs"}
        >
          <NounPixelHeart10989631SvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgglobal_theme_classic]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            })}
            role={"img"}
          />
        </PlasmicLink__>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__c39Lh, {
          [sty.freeBoxglobal_theme_classic__c39LheNktM]: hasVariant(
            globalVariants,
            "theme",
            "classic"
          )
        })}
      >
        {(() => {
          try {
            return $props.showImage;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (() => {
                try {
                  return $props.showImage;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xgq8M)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                />
              ) : null,
              value: args.windowImage
            })
          : null}
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gb4Nd,
            {
              [sty.textglobal_theme_classic__gb4NDeNktM]: hasVariant(
                globalVariants,
                "theme",
                "classic"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.windowText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "i release all kinds of electronic music on various streaming platforms like bandcamp, spotify, and itunes! go check it out!";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__yllpg)}>
          {renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>
      </div>
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  music: ["music", "xButton", "svg"],
  xButton: ["xButton", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  music: "a";
  xButton: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWindowBlue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWindowBlue__VariantsArgs;
    args?: PlasmicWindowBlue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWindowBlue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWindowBlue__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWindowBlue__ArgProps,
          internalVariantPropNames: PlasmicWindowBlue__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWindowBlue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "music") {
    func.displayName = "PlasmicWindowBlue";
  } else {
    func.displayName = `PlasmicWindowBlue.${nodeName}`;
  }
  return func;
}

export const PlasmicWindowBlue = Object.assign(
  // Top-level PlasmicWindowBlue renders the root element
  makeNodeComponent("music"),
  {
    // Helper components rendering sub-elements
    xButton: makeNodeComponent("xButton"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicWindowBlue
    internalVariantProps: PlasmicWindowBlue__VariantProps,
    internalArgProps: PlasmicWindowBlue__ArgProps
  }
);

export default PlasmicWindowBlue;
/* prettier-ignore-end */
