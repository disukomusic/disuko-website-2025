// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x4VgG6kzZCVuaqknYN7tgc
// Component: jITmhNWlDefq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Navbar from "../../Navbar"; // plasmic-import: 5THU1wffFibB/component
import WindowButton from "../../WindowButton"; // plasmic-import: KZYdo-R8GYAn/component
import Window from "../../Window"; // plasmic-import: BWjgdOwFY_OO/component

import { useScreenVariants as useScreenVariantsdmuurUfQuA6N } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DmuurUFQuA6N/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: x4VgG6kzZCVuaqknYN7tgc/projectcss
import sty from "./PlasmicComissions.module.css"; // plasmic-import: jITmhNWlDefq/css

createPlasmicElementProxy;

export type PlasmicComissions__VariantMembers = {};
export type PlasmicComissions__VariantsArgs = {};
type VariantPropType = keyof PlasmicComissions__VariantsArgs;
export const PlasmicComissions__VariantProps = new Array<VariantPropType>();

export type PlasmicComissions__ArgsType = {};
type ArgPropType = keyof PlasmicComissions__ArgsType;
export const PlasmicComissions__ArgProps = new Array<ArgPropType>();

export type PlasmicComissions__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  windowButton?: Flex__<typeof WindowButton>;
};

export interface DefaultComissionsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComissions__RenderFunc(props: {
  variants: PlasmicComissions__VariantsArgs;
  args: PlasmicComissions__ArgsType;
  overrides: PlasmicComissions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdmuurUfQuA6N()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicComissions.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicComissions.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicComissions.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicComissions.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicComissions.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicComissions.pageMetadata.description}
        />

        <link rel="canonical" href={PlasmicComissions.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__hYSzg)}>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___2B3YC)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "75%"
            }
            loading={"lazy"}
            src={{
              src: "/plasmic/disuko_website_retro_version/images/wordart2Png.png",
              fullWidth: 1797,
              fullHeight: 564,
              aspectRatio: undefined
            }}
          />

          <WindowButton
            data-plasmic-name={"windowButton"}
            data-plasmic-override={overrides.windowButton}
            className={classNames("__wab_instance", sty.windowButton)}
            link={"https://forms.gle/Hn1Kkf176DsSgawG9"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nmYig
              )}
            >
              {"Request Form + Info"}
            </div>
          </WindowButton>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__za4GN
            )}
          >
            {"Pricing Estimates + Basic Details"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__u2Lre)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__qyp8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yhfEx
                )}
              >
                {"2D Design"}
              </div>
              <Window
                className={classNames("__wab_instance", sty.window__bGvUm)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qfXr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/ddsLogoPng2.png",
                      fullWidth: 1271,
                      fullHeight: 622,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"One-Off Logo: $20"}
                windowTitle={"2D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bHG
                  )}
                >
                  {"Social Media Icon, Sticker Design, Game Logo, etc."}
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__gl6Ht)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__tltl1)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/image30.png",
                      fullWidth: 4400,
                      fullHeight: 5600,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Poster: $40"}
                windowTitle={"2D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aAapR
                  )}
                >
                  {"Music Event Poster, Poster Design for Printing"}
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__rJrJ7)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__bc6M8)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/honeyTeaaaBrandSheetPng.png",
                      fullWidth: 2480,
                      fullHeight: 3508,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Logo + Simple Brand Kit: $60"}
                windowTitle={"2D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__exCeu
                  )}
                >
                  {
                    "Social Media Brand Kit, Twitch Overlay, Website Assets, etc."
                  }
                </div>
              </Window>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___2OlL9)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kZp8C
                )}
              >
                {"3D Design"}
              </div>
              <Window
                className={classNames("__wab_instance", sty.window___8G18Z)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__jGHr)}
                    displayHeight={"231px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/toastFinalWebSizePng.png",
                      fullWidth: 768,
                      fullHeight: 768,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Simple Model - $20"}
                windowTitle={"3D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ct6M0
                  )}
                >
                  {"Simple Character, Object"}
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__xXtNw)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___8SmNd)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/frogWebp.webp",
                      fullWidth: 256,
                      fullHeight: 189,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Complex Model / Simple Scene- $50"}
                windowTitle={"3D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kfdg
                  )}
                >
                  {"Simple Character, Simple Environment, 1-2 Props"}
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__nZzKy)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1Aowu)}
                    displayHeight={"325px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/animestreetWebp.webp",
                      fullWidth: 800,
                      fullHeight: 1422,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Full Scene - $200"}
                windowTitle={"3D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eytyP
                  )}
                >
                  {"Full Background, Many Props, Simple Character"}
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__n50M)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__t9DiA)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/image67.gif",
                      fullWidth: 600,
                      fullHeight: 338,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={
                  "Full 3D Character- $300 (REQUIRES FRONT AND SIDE REF SHEET)"
                }
                windowTitle={"3D Design"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bdJBs
                  )}
                >
                  {
                    "Full 3D Character w/ Rig, VRChat Avatar Base, Video Game Character, Vtuber Avatar Base, etc."
                  }
                </div>
              </Window>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__aScra)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hu5Qu
                )}
              >
                {"Audio"}
              </div>
              <Window
                className={classNames("__wab_instance", sty.window__ga2Wt)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__qgQUs)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/mixerPng.png",
                      fullWidth: 1597,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Mini Track- $10"}
                windowTitle={"Music"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qv2TC
                  )}
                >
                  {
                    "Studio Intro Jingle, Video Game Sound Effect, 10-30 seconds"
                  }
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__mKkHq)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__crTu)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/mixerPng.png",
                      fullWidth: 1597,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Short Track - $75"}
                windowTitle={"Music"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__il6Bk
                  )}
                >
                  {
                    "Video Game Background Music, Youtube Intro/Outro 60-90 seconds"
                  }
                </div>
              </Window>
              <Window
                className={classNames("__wab_instance", sty.window__kor0)}
                showImage={true}
                windowImage={
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___1AbcC)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "354px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/disuko_website_retro_version/images/mixerPng.png",
                      fullWidth: 1597,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                }
                windowText={"Full Track - $150"}
                windowTitle={"Music"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bk1Ht
                  )}
                >
                  {
                    "Full Track for Release, Rhythm Game Track, Short Film Music, 2-3 Minutes"
                  }
                </div>
              </Window>
            </Stack__>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kr28D
            )}
          >
            {"Current Commissions Progress"}
          </div>
          <div className={classNames(projectcss.all, sty.columns__arCte)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__nwOqx)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___43Ac
                )}
              >
                {"Queue"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6SyU)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__s5L5J)}
                  showImage={false}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__q5QTw)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/logo2023512XJpg.jpg",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"3D Office Props for @voidred.dev"}
                  windowTitle={"Office Props"}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__ozfWe)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4DZZn
                )}
              >
                {"WIP"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___6EVmN)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window___64NmC)}
                  linkDestination={""}
                  showImage={true}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tn5Pv)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image70.png",
                        fullWidth: 509,
                        fullHeight: 524,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"TeaSona Character for @hiveandhearth.cafe"}
                  windowTitle={"3D - TeaSona"}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__p1BVq)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rEoIg
                )}
              >
                {"Complete"}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oxqpO)}
              >
                <Window
                  className={classNames("__wab_instance", sty.window__orzP)}
                  showImage={true}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__z18Xo)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image71.png",
                        fullWidth: 658,
                        fullHeight: 627,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"Sherbert Puppycat Character"}
                  windowTitle={"3D - Sherbert"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window__cnHUk)}
                  showImage={true}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__gtnmw)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image72.png",
                        fullWidth: 1920,
                        fullHeight: 1080,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"Polaroid Scene Template for @rustybeefus"}
                  windowTitle={"3D - Polaroid Scene"}
                />

                <Window
                  className={classNames("__wab_instance", sty.window___5AZoh)}
                  showImage={true}
                  windowImage={
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ilXxZ)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/disuko_website_retro_version/images/image73.png",
                        fullWidth: 1189,
                        fullHeight: 814,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  windowText={"Red Crown Brand Kit for https://redcrown.events"}
                  windowTitle={"2D - Red Crown Brand Kit"}
                />
              </Stack__>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "windowButton"],
  navbar: ["navbar"],
  windowButton: ["windowButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  windowButton: typeof WindowButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComissions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComissions__VariantsArgs;
    args?: PlasmicComissions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComissions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComissions__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComissions__ArgProps,
          internalVariantPropNames: PlasmicComissions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComissions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComissions";
  } else {
    func.displayName = `PlasmicComissions.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "x4VgG6kzZCVuaqknYN7tgc"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicComissions = Object.assign(
  // Top-level PlasmicComissions renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    windowButton: makeNodeComponent("windowButton"),

    // Metadata about props expected for PlasmicComissions
    internalVariantProps: PlasmicComissions__VariantProps,
    internalArgProps: PlasmicComissions__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "🌸disuko - Commissions",
      description:
        "Commissions by disuko, featuring design, 3D modelling, and music production. ",
      ogImageSrc: "",
      canonical: "https://disuko.gay/commissions"
    }
  }
);

export default PlasmicComissions;
/* prettier-ignore-end */
